<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>版本控制系统 on AllForOne&#39;s Site,Your genneration comes!</title>
    <link>https://yuxin-zh.github.io/AllForOne/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 版本控制系统 on AllForOne&#39;s Site,Your genneration comes!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Feb 2022 00:01:02 +0800</lastBuildDate><atom:link href="https://yuxin-zh.github.io/AllForOne/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git</title>
      <link>https://yuxin-zh.github.io/AllForOne/p/git/</link>
      <pubDate>Tue, 15 Feb 2022 00:01:02 +0800</pubDate>
      
      <guid>https://yuxin-zh.github.io/AllForOne/p/git/</guid>
      <description>[TOC]
Git 1.版本控制系统（VCS) 1.1 基本概念 ...行内代码  版本控制系统（VCS）最基本的功能就是版本控制。而所谓版本控制，意思就是在文件的修改历史中保存修改历史，让i方便对文件的i修改工作。 我们常用的主流文本编辑器的undo功能其实就是版本控制。 但是VCS和文本编辑器的撤销功能相比，有一个很重要的区别就是：  对于程序代码而言：修改的生命周期很长，如果采用每次改动自动保存的形式来保存修改历史，将会导致改动历史非常频繁和无章可循。所以和文本编辑器的撤销功能不同，VCS保存修改历史，使用的是主动提交改动的机制。    2.分布式版本控制系统(DVCS) 2.1 工作模型  分布式（DVCS）与VCS的区别在于，分布式VCS除了中央仓库之外，还有本地仓库：团队的每一个成员的机器上都有一份本地昂库，这个仓库包含了所有版本历史，换句话说在这种工作模型内，你是和本地仓库交互。 工作流程  提交代码到本地仓库 在服务器上创建一个中央仓库，并把1中的提交推送到服务器的中央仓库。 其他工作人员将中央仓库的所有内容克隆到本地，拥有了各自的本地仓库，此时进行并行开发 在职过后的开发过程中，么个人都会独立负责开发一个功能，在这个功能的开发过程中，每个人都会把它的每一步改动提交到本地仓库（由于本地提交毋须立即推送到中央仓库，所以提交的内容不一定要是一个完整的功能额模块，而可以是某个步骤） 当完成了某个功能的开发时，可以把与该功能相关的所有提交 从本地仓库推送到中央仓库 而每次有人把新的提交推送到中央仓库是，另外的人就可以选择把这些提交同步到自己的机器上，并把他们和自己的本地代码合并    2.2优缺点分析  😵优点：①大多数操作可以在本地运行，速度更快。②由于可以提交到本地，因此可以分步提交代码，把代码提交做的更细，而不是一个提交包含很多代码，难以review也难以回溯。 🤠缺点：由于每一个旧机器都需要有完整的本地仓库，所以初次获取代码需要获取项目比较费时②本地占用的存储比中央式高  3.使用Git管理代码 3.1 前期准备  Github创建远程仓库 （.gitignore设置项目类型，是git仓库中的一个特俗的文本文件，记录了你不希望提交到仓库的目录和文件的名称或类型 点击右边的Clone or downloda，然后把仓库的Clone地址复制到截切版 在你喜欢的任意一个位置，打开Git Bash,输入Git clone 刚复制的地址（该过程可能会需要你去输入Github的用户名和密码） 克隆完毕后，你的目录中会出现.git的隐藏目录，改了目录就是你的本地仓库，你的所有把那本信息都会存在这里。而.git所在的目录成为工作目录。 一些git的基本指令在这里就不详细介绍了，可以查阅Git官方文档  4.Git基本工作模型  由于git在工作时，必须保证自己的本地仓库与中央仓库保持一致，因此，当你第一次从中央仓库拉去代码后，你的同事又push了一次，那么当你想要把自己的commits提交上去时，就需要先拉取同事的代码到本地。😧 当push时出现冲突：  在现实的团队开发中，全队时同时并行开发的，所以必然会出现当一人push代码时，中央仓库已经被其他同事先一步push了的情况。 那这种情况下，当我们像上面介绍的那样使用git pull指令拉取代码时，他并不会像之前那样直接结束，而是会出现一个输入提交信息的界面，这是因为pull操作返现不仅远程仓库有本地每天有的commits，本地也有远端仓库不具备的commits，它就会把远端和本地独有的commit合并，自动生成一个新的commit 另一种情况，当出现冲突的部分是你和你的同事对某一个文件的某一处进行了不同的修改，Git就无法直接处理了，关于这点会在之后的文章中介绍🦄    5.Head、master、branch的使用讲解 👇👇👇👇👇👇👇👇👇👇👇👇
When Typed &amp;ldquo;git log&amp;rdquo;</description>
    </item>
    
  </channel>
</rss>
