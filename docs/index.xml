<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>AllForOne&#39;s Site,Your genneration comes!</title>
        <link>https://yuxin-zh.github.io/AllForOne/</link>
        <description>Recent content on AllForOne&#39;s Site,Your genneration comes!</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 26 May 2022 16:08:57 +0800</lastBuildDate><atom:link href="https://yuxin-zh.github.io/AllForOne/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>SRS</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/srs/</link>
        <pubDate>Thu, 26 May 2022 16:08:57 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/srs/</guid>
        <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&#34;1introduction&#34;&gt;1.introduction&lt;/h1&gt;
&lt;h2 id=&#34;11purpose&#34;&gt;1.1Purpose&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This specification is written to analyze and summarize the basic requirements of the project and describe the basic requirements and functional characteristics of the functional modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The name of this project is called &amp;ldquo;Super Store Data Analysis&amp;rdquo;, and users can get the following information through this website&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Top 10 products with sales volume greater than 1000&lt;/li&gt;
&lt;li&gt;total sales in each order priority where quantity is even number&lt;/li&gt;
&lt;li&gt;10 countries whichi have lowest minimutes sales&lt;/li&gt;
&lt;li&gt;top 10 customers based on the no of letters in their time&lt;/li&gt;
&lt;li&gt;total quantity in each market where pofit is greater than 100&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2project-overview&#34;&gt;2.Project Overview&lt;/h1&gt;
&lt;h2 id=&#34;21product-description&#34;&gt;2.1product description&lt;/h2&gt;
&lt;p&gt;Build a web3d website through Three.js, and realize information interaction and user registration, login and other functions through jsp and mysql, and display the data through flourish.&lt;/p&gt;
&lt;h2 id=&#34;22product-features&#34;&gt;2.2Product Features&lt;/h2&gt;
&lt;p&gt;This project can implement a simple online registration, login function, and use hive to process data. Such as the flow chart:&lt;/p&gt;
&lt;h1 id=&#34;3specific-requirement&#34;&gt;3.specific requirement&lt;/h1&gt;
&lt;h2 id=&#34;31use-case-description&#34;&gt;3.1use case description&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;View Super store related data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Performer&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;User Administrator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use Case Brief&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Specifies how to use the system to query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;precondition&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;User identity needs to be properly authenticated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;postcondition&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Return the corresponding data as required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Basic process&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1. If you enter the system for the first time, return to the registration page 2. If the registration is successful, return to the login page 3. Click the &amp;ldquo;query&amp;rdquo; button 4. Enter the data display page&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>Project_Show</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/project_show/</link>
        <pubDate>Thu, 19 May 2022 17:30:32 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/project_show/</guid>
        <description>&lt;p&gt;[Toc]&lt;/p&gt;
&lt;h1 id=&#34;project-presentation&#34;&gt;Project Presentation&lt;/h1&gt;
&lt;h2 id=&#34;1小组成员介绍&#34;&gt;1.小组成员介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;组长：张钰昕&lt;/li&gt;
&lt;li&gt;组员：刘博予 吴平 张琳 周宇璇 刘士铭⛏&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2团队分工&#34;&gt;2.团队分工&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前后端以及使用Hive处理数据：张钰昕 刘博予 吴平 刘士铭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用Flourish处理并展示数据：周宇璇 张琳&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3项目效果展示&#34;&gt;3.项目效果展示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220519174336142.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220519174336142&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220519174355305.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220519174355305&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册和登录页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220519174739871.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220519174739871&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220519174810424.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220519174810424&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据处理后的效果展示暂时未完成&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Bingda</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/bingda/</link>
        <pubDate>Thu, 14 Apr 2022 17:10:35 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/bingda/</guid>
        <description>&lt;img src="https://yuxin-zh.github.io/AllForOne/p/bingda/3.jpg" alt="Featured image of post Bingda" /&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;我还没转换成ap模式 所以你就暂时使用路由连接&lt;/strong&gt;（只用给路由器通电 然后连接网线一端插在路由的Lan随便一个接口 另一端插小车上）🚚&lt;/li&gt;
&lt;li&gt;你电脑也要连接这个路由的wifi信号  WLAN名字是：419-1  管理密码是418418418&lt;/li&gt;
&lt;li&gt;然后登录tplogin.cn  输入管理密码 进入界面点击设备管理看小车的ip地址 应该是192.168.0.101&lt;/li&gt;
&lt;li&gt;然后点击tools压缩包里的nomachine安装  然后 👉&lt;strong&gt;管理员的方式运行&lt;/strong&gt;👈nomachine&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/bingda/1.png&#34;
	width=&#34;1423&#34;
	height=&#34;258&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/bingda/1_hufd5c3110c1c825a2c1dfb162a803b8f7_37342_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/bingda/1_hufd5c3110c1c825a2c1dfb162a803b8f7_37342_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220414171526481&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;551&#34;
		data-flex-basis=&#34;1323px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/bingda/2.png&#34;
	width=&#34;418&#34;
	height=&#34;74&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/bingda/2_hub5735a508524b0fb9bc6ac2483d7e42f_11451_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/bingda/2_hub5735a508524b0fb9bc6ac2483d7e42f_11451_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220414171739145&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;564&#34;
		data-flex-basis=&#34;1355px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;点击进去后账号和密码随便取一个 记住就行（&lt;strong&gt;一定要是管理员运行  不然会闪退&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;然后你进去会看到一个ubuntu18的界面 点开terminal📑&lt;/li&gt;
&lt;li&gt;一般的运行流程是这样的（我以打开摄像头为例子奥）
&lt;ol&gt;
&lt;li&gt;先打开一个terminal 输入roscore  回车✍&lt;/li&gt;
&lt;li&gt;在打开一个terminal 输入roslaunch robot_vision robot_camera.launch🎃&lt;/li&gt;
&lt;li&gt;再新开一个terminal输入rqt_image_view 回车 这样就可以查看图像了👀&lt;/li&gt;
&lt;li&gt;其他的都差不多的 就是要注意每新发布一个话题 你都需要新开一个terminal并且roscore是需要第一个打开的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Internet</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/internet/</link>
        <pubDate>Sun, 20 Mar 2022 15:48:16 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/internet/</guid>
        <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&#34;计算机网络&#34;&gt;计算机网络&lt;/h1&gt;
&lt;h2 id=&#34;1前言&#34;&gt;1.前言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算机网络是 &lt;strong&gt;互连的（互联互通）&lt;/strong&gt; **自治（无主从关系）**的计算机集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;五大功能：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据通信&lt;/strong&gt;：连通性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源共享&lt;/strong&gt;：对硬件 软件 数据的共享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分布式处理&lt;/strong&gt;：多台计算机共同承担同一工作任务的不同部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提高可靠性&lt;/strong&gt;：替代机的存在&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;：将任务均衡分配给各台计算机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计网的组成：硬件，软件，&lt;strong&gt;协议&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边缘部分：用户直接使用：C/S方式 P2P方式&lt;/li&gt;
&lt;li&gt;核心部分：为边缘部分服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信子网：实现 &lt;strong&gt;数据通信&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;资源子网：实现 &lt;strong&gt;资源共享/数据处理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220320160038673.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220320160038673&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算机网络的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按分布范围分：&lt;strong&gt;广域网WAN&lt;/strong&gt; &lt;strong&gt;城域网MAN&lt;/strong&gt; &lt;strong&gt;局域网WAN&lt;/strong&gt; &lt;strong&gt;个人区域网PAN&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;按使用者分：公用网，专用网&lt;/li&gt;
&lt;li&gt;按交换技术分：电路交换，报文交换，分组交换&lt;/li&gt;
&lt;li&gt;按拓扑结构分：&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220320161116413.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220320161116413&#34;
	
	
&gt;&lt;/li&gt;
&lt;li&gt;按传输技术分：广播式网络（共享公共信道） 点对点：使用 &lt;strong&gt;分组存储转发和路由选择机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;分组转发：指互联网中路由器转发ip分组的物理过程和数据报转发机制。在网络中，一台主机通常是与一台路由器相链接，这台路由器叫主机的 &lt;strong&gt;默认路由器&lt;/strong&gt;，又称为 &lt;strong&gt;第一跳路由器&lt;/strong&gt;或 &lt;strong&gt;缺省路由器&lt;/strong&gt; ,源路由器  目的主机所链接的路由器叫做 &lt;strong&gt;目的路由器&lt;/strong&gt; ；分组转发通常分为直接和间接，源主机与目的主机的在一个网络就叫做直接转发 否则就为间接转发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2标准化工作&#34;&gt;2.标准化工作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;标准的分类：
&lt;ul&gt;
&lt;li&gt;法定标准：由权威机构指定的正式的，合法的标准  例如OSI&lt;/li&gt;
&lt;li&gt;事实标准：某些公司的产品在竞争中占据了主流；例如TCP/IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RFC：因特网标准的一种形式  并不代表所有RFC都是因特网标准 因特网标准一定是RFC形式；RFC上升为因特网标准需要四个阶段：
&lt;ul&gt;
&lt;li&gt;1）&lt;strong&gt;因特网草案&lt;/strong&gt;（此时并不是RFC文档）&lt;/li&gt;
&lt;li&gt;2）&lt;strong&gt;建议标准&lt;/strong&gt;   成为了RFC文档&lt;/li&gt;
&lt;li&gt;3）&lt;strong&gt;草案标准&lt;/strong&gt;  2011年以后取消&lt;/li&gt;
&lt;li&gt;4）因特网标准&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标准化工作的相关组织
&lt;ul&gt;
&lt;li&gt;ISO ITU IEEE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3互联网相关的指标&#34;&gt;3.互联网相关的指标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;速率&lt;/strong&gt;：即数据率或输出传输率，比特率
&lt;ul&gt;
&lt;li&gt;比特 1/0位&lt;/li&gt;
&lt;li&gt;连接在计算机网络上的主机在数字信道上传送数据 &lt;strong&gt;位数的速率&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;单位是k/s kb/s Gb/s Tb/s&lt;/li&gt;
&lt;li&gt;需要注意的使形容速度的不同单位的换算关系与存储是不同的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带宽&lt;/strong&gt;：用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的&amp;quot;最高数据率&amp;quot;  电磁波的传播速率2*10^8m/s&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;：表示在单位时间内通过某个网络（接口 信道）的数据量。单位为b/s lb/s Mb/s&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时延&lt;/strong&gt;：指数据报从网络的一段传送到另一端所需的事件。也叫 &lt;strong&gt;延迟 或 迟延&lt;/strong&gt;。单位是ms
&lt;ul&gt;
&lt;li&gt;发送时延📫==数据长度/信道带宽&lt;/li&gt;
&lt;li&gt;传播时延📰==取决于电磁波传播速度和链路长度&lt;/li&gt;
&lt;li&gt;排队时延🚉==等待输出/输入 链路可用所需的时间&lt;/li&gt;
&lt;li&gt;处理时延🥓==检错 找出口的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;往返时延RTT&lt;/strong&gt;：从发送方发送数据开始，到发送方接收到接收方的确认，总共经历的时延&lt;/li&gt;
&lt;li&gt;利用率：
&lt;ul&gt;
&lt;li&gt;信道利用率: 主要看链路多长时间上有数据传输&lt;/li&gt;
&lt;li&gt;网络利用率: 信道利用率加权平均值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523143516780.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220523143516780&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523153035397.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220523153035397&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523153047881.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220523153047881&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523153342609.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220523153342609&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523153644679.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220523153644679&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523153803984.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523154236760.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220523154236760&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523154626206.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220523154626206&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523155745729.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220523155745729&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220523160002226.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220523160002226&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hive</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/hive/</link>
        <pubDate>Wed, 23 Feb 2022 15:24:22 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/hive/</guid>
        <description>&lt;img src="https://yuxin-zh.github.io/AllForOne/p/hive/b2.webp" alt="Featured image of post Hive" /&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&#34;1hive-introduction&#34;&gt;1.Hive Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HIve是一个开源的 &lt;strong&gt;数据仓库&lt;/strong&gt;软件，用于read，write，manage直接存储在HDFS中的大型数据集文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HQL用于数据查询和分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HIve是基于读取的因此不适用于高频率写入操作的事务处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HIve功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提取/转载/加载 （ETL）数据&lt;/li&gt;
&lt;li&gt;存储 查询和分析HDFS或Hbase中存储的大规模数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查询是通过MapReduce完成的，Notice🎉：并非所有查询都需要Mapreduce&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Extension：hive为了执行效率考虑，简单的查询如select，不带count，sum,group by😀这样的都不走mapreduce，直接读取hdfs文件进行filter过滤&lt;/li&gt;
&lt;li&gt;当查询语句中的过滤条件只是分区字段的情况下不会进行mapreduce&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hive-site-xml 有个配置参数&lt;code&gt;hive.fetch.task.conversion = more&lt;/code&gt;将该参数设置为more时，简单查询就不会走mapreduce了，色湖之为minimal，那么任何查询都会走mapreduce🚩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hive允许用户编写自己的函数,有如下三种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户定义函数 UDF&lt;/li&gt;
&lt;li&gt;用户定义聚合函数 UDAF&lt;/li&gt;
&lt;li&gt;用户定义的表生成函数 UDTF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hive缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持处理session&lt;/li&gt;
&lt;li&gt;无法修改表数据（无法更新、删除、插入）只能通过文件追加和重新导入数据&lt;/li&gt;
&lt;li&gt;无法为列编制索引（支持索引，但无法提高查询速度）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hive数据存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hive可以解析数据，所以将数据导入Hive表只需将数据移动到表所在的目录（数据在HDFS）,如果数据在本地文件系统，则需要将数据复制到表所在的目录中。🀄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从本地：Example：在本地文件系统船舰一个名为local.txt的文件（数据之间空格间隔），然后执行了&lt;code&gt;load data local inpath&#39;绝对路径/local.txt into table local;就可以 使用&lt;/code&gt;hadoop fs -ls&lt;/p&gt;
&lt;p&gt;路径/local 查看是否导入成功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从HDFS:在HIve中创建data_hdfs表，表中假设有两个字段：name,age;&lt;/p&gt;
&lt;p&gt;将文件从本地上传到hdfs：&lt;code&gt;hadoop fs -put data_hdfs.txt /data&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;hive导入`load data inpath &amp;lsquo;data/data_hdfs.txt&amp;rsquo; into table data_hdfs;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HIve客户端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Thrift Server：为所有支持Thrift的编程语言的请i去提供服务（几乎所有主流语言）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thrift实际上是实现了C/S模式，通过代码生成工具将thrift文生成服务器端和客户端代码（可以为不同语言），从而实现服务端和客户端跨语言的支持。用户在Thirft文件中声明自己的服务，这些服务经过编译后会生成相应语言的代码文件，然后客户端调用服务，服务器端提服务便可以了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thrift是Facebook于2007年开发的跨语言的rpc服框架，提供多语言的编译功能，并提供多种服务器工做模式；用户经过Thrift的IDL（接口定义语言）来描述接口函数及数据类型，而后经过Thrift的编译环境生成各类语言类型的接口文件，用户能够根据本身的须要采用不一样的语言开发客户端代码和服务器端代码。git&lt;/p&gt;
&lt;p&gt;例如，我想开发一个快速计算的RPC服务，它主要经过接口函数getInt对外提供服务，这个RPC服务的getInt函数使用用户传入的参数，通过复杂的计算，计算出一个整形值返回给用户；服务器端使用java语言开发，而调用客户端能够是java、c、python等语言开发的程序，在这种应用场景下，咱们只须要使用Thrift的IDL描述一下getInt函数（以.thrift为后缀的文件），而后使用Thrift的多语言编译功能，将这个IDL文件编译成C、java、python几种语言对应的“特定语言接口文件”（每种语言只须要一条简单的命令便可编译完成），这样拿到对应语言的“特定语言接口文件”以后，就能够开发客户端和服务器端的代码了，开发过程当中只要接口不变，客户端和服务器端的开发能够独立的进行。apa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDBC Driver：用于hive和java之间建立连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ODBC Driver&lt;/strong&gt;：允许自持ODBC协议的应用程序连接到hive 🏷&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HIve Service&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HIve CLI ：是一个shell，用于&lt;strong&gt;执行Hive查询和命令&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;HIve Web User Interface:hive cli的替代，提供了相应功能的基于web的GUI&lt;/li&gt;
&lt;li&gt;HIve Metastore：一个 &lt;strong&gt;中央存储库&lt;/strong&gt;，存储仓库中的&lt;strong&gt;各种表和分区的所有结构信息&lt;/strong&gt;。还包括列的元数据及其类型信息；Used for 读取和写入数据以及存储数据的相应HDFS文件的序列化程序和反序列化数据。📝&lt;/li&gt;
&lt;li&gt;HIve Server: 接受来自不同客户端的请求，并将其提供给Hive驱动程序&lt;/li&gt;
&lt;li&gt;HIve Driver: 接收来自不同来源的查询，它 &lt;strong&gt;将查询传输到编译器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;HIve Compiler：目的是 &lt;strong&gt;解析查询🔍并对不同的查询快和表达式执行语义分析&lt;/strong&gt;，&amp;ndash;&amp;gt;将HQL转化为MapReduce Job&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2hive数据模型&#34;&gt;2.HIve数据模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;托管表或内部表&lt;/strong&gt;：HIve在创建表时的默认表。
&lt;ul&gt;
&lt;li&gt;特点：在内部表被删除后，表的元素据和表数据都从HDFS中完全删除&lt;/li&gt;
&lt;li&gt;适用场景：👤ETL数据清理死用内部表做中间表，清理时HDFS上的文件同步清除🆑在误删的情况下，易于回复的数据，用内部表⏲在统计分析时，不涉及数据共享的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部表：表中的数据删除后任然在HDFS中，也就是说只会删除相关的元数据，而表的内容不会删除
&lt;ul&gt;
&lt;li&gt;声明外部表的语法&lt;code&gt;create external table if not exists &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partiotion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过基于任何列或分区键将相同类型的数据分组在一起，HIve表被组织在分区中，每个表都有一个分区键用于表示&lt;/strong&gt;，分区可以加快查询和切片过程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create table........... Patitioned BY(partition1 string,partition2 string)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分区通过减少延迟来提高查询速度，因为它只扫描相关数据，而不扫描完整数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分桶Buckets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表或者分区可以再次细分为Bucket，因此必须使用hash函数：&lt;/li&gt;
&lt;li&gt;`create table&amp;hellip;..patitioned B&amp;hellip;.Clustered BY(clolumn 1 ,column 2) Sorted BY(column_name Asc:Desc,_) Into num_bucket Buckets;&lt;/li&gt;
&lt;li&gt;分桶只是表目录中的文件，可以是分区也可不分区，甚至可以选择n个bucket对数据进行分区。、&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3hive数据类型&#34;&gt;3.Hive数据类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HIve是用java开发的，HIve的基本数据类型对应于java的基本数据类型：TINYINT-1,SMALLINT-2,INT-4,BIGINT-8;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复杂数据类型&lt;code&gt; create table tt(c1 ARRAY&amp;lt;INT&amp;gt;,c2 MAP&amp;lt;STRING,INT&amp;gt;,c3 STRUCT&amp;lt;a:STRING,b:INT,c:DOUBLE&amp;gt;);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4hiveserver2&#34;&gt;4.HIveServer2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HiveServer2是一种使客户端能够对HIve执行查询的服务（hs1称作节约服务器，基于Thrift协议构建，用于处理HIve的跨平台通讯，它允许不同的客户端向hive提交请求并检索最后结果）。&lt;strong&gt;但是它不处理来自多个客户端的并发请求，因此被Hs2替换&lt;/strong&gt;🏷🏷🏷&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41-hs2体系结构&#34;&gt;4.1 HS2体系结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MetaStore👋&lt;/strong&gt;：原存储可以配置为 &lt;strong&gt;嵌入式&lt;/strong&gt;或 &lt;strong&gt;远程服务器&lt;/strong&gt;。HS2与metastore通信，以获取查询编译所需要的元数据
&lt;ul&gt;
&lt;li&gt;嵌入式：hive服务和metastore服务运行在同一个进程中，derby服务也运行在该进程中。该模式无需特殊配置。&lt;/li&gt;
&lt;li&gt;本地模式：hive服务和metastore服务运行在同一个进程中，mysql是单独的进程，可以在同一台机器上，也可以在远程机器上。该模式只需将hive-site.xml中的ConnectionURL指向mysql，并配置好驱动名、数据库连接账号即可&lt;/li&gt;
&lt;li&gt;远程模式：hive服务和metastore在不同的进程内，可能是不同的机器。  该模式需要将hive.metastore.local设置为false，并将hive.metastore.uris设置为metastore服务器URI，如有多个metastore服务器，URI之间用逗号分隔。metastore服务器URI的格式为thrift://host:port。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JDBC Client🥐&lt;/strong&gt;：JDBC客户端使用JDBC驱动与HS2交互
&lt;ul&gt;
&lt;li&gt;jdbc启动传输连接，通过 &lt;strong&gt;OpenSession API&lt;/strong&gt;调用获取会话句柄创建 &lt;strong&gt;HiveConnection&lt;/strong&gt;， &lt;strong&gt;绘画使从服务器端创建&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;执行HiveStatement，并从Thrift客户机发出ExecuteStatement API调用。在API调用中，SessionHandle信息与查询信息一起传递给服务器&lt;/li&gt;
&lt;li&gt;HS2请求驱动程序（CommandProcessor）进行查询解析和编译。驱动程序启动一个后台job，该job与MApreduce对话，然后向客户端返回响应（包含从服务器端创建的OperationHandle）&lt;/li&gt;
&lt;li&gt;客户端使用oh与hs2对话，以查询执行状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5hive管理&#34;&gt;5.Hive管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hive中的数据库描述了为了相似目的或属于相同组的表的集合。 &lt;strong&gt;每当创建数据库时，HIve都会在/user/Hive/warehouse&lt;/strong&gt;处为每个数据库创建一个目录，该目录在HIve.metastore.warehouse.dir中定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#描述数据库
describe database ....
#创建带有注释的数据库
create database if not exists t1 comment &amp;#34;Its Niit Project&amp;#34;
#使用dbproperties创建数据库
create database if not exists db2 with dbproperties(&amp;#39;creator&amp;#39;=&amp;#39;Peter&amp;#39;,&amp;#39;date&amp;#39;=&amp;#39;2021-08-02&amp;#39;);
#用dbproperties描述数据库
describe database extended t1;
#删除数据库及其所有表
deop database if exists 数据库名 CASCADE;
#使用通配符
show databases like &amp;#39;my.*&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;external&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;......&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;当用户创建内部表时，它会将数据移动到仓库指向的路径。如果创建了外部表的，它只会记录数据所在的路径，而不更改数据的位置。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wdnmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delimited&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;terminated&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;分隔符&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;terminated&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stored&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;文件类型（默认是时&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TEXTFILE&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;创建分区表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;part_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partiotioned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delimited&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;terminated&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;terminated&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;创建分桶表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partiotioned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clustered&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;into&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buckets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delimited&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;terminated&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;terminated&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;复制表结构&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_liek_table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;like&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;err&#34;&gt;表重命名：&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;alter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;rename&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;修改表的列类型：&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;alter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old_column_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_column_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;添加列：&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;alter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_nameadd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;更改列名：&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;alter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;删除列并创建新列名：&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;alter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;51托管表和内部表&#34;&gt;5.1托管表和内部表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内部表的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内部表由hive控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;访问内部表的数据唯一的方法就是使用hive&lt;/strong&gt;。无论数据的位置是HDFS还是hive自己的仓库目录，&lt;strong&gt;HIve不允许其他的任何应用程序访问该数据&lt;/strong&gt;®®®®&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果必须访问内部表的数据，只能对该表使用HIve查询&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部表的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有存储在metastore的元数据由hive控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;52将数据加载到hive&#34;&gt;5.2将数据加载到Hive&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;加载的过程中，LOCAL关键词指定文件在主机中的位置。 &lt;strong&gt;如果未指定LOCAL关键字，将从inpath之后指定的URI或fs.default.name Hive属性中的值加载文件，而Overrite决定是追加还是替换现有数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;本地：&lt;code&gt;load data local inpath &#39;/////&#39; into table table_name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HDFS:&lt;code&gt;load data inpath &#39;/user/.../... into table table_name&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hive分区&#34;&gt;🍥🍥Hive分区🍥🍥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分区的重要性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分区是一种根据特定列的值将表划分为相关部分的方法⏲先提一下HIve在查询中的作用：hive将SQL查询转换为Mapreduce作业，然后将其提交到Hadoop集群。提交SQL查询时，HIve读取整个数据集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;静态分区-spstatic-partition&#34;&gt;静态分区 SP（static partition）&lt;/h3&gt;
&lt;p&gt;  1、静态分区是在编译期间指定的指定分区名🈯
  2、支持load和insert两种插入方式
    2.1load方式&lt;code&gt;load data local inpath&#39;&#39; into table partition..&lt;/code&gt;
      1）会将分区字段的值全部修改为指定的内容
      2）一般是确定该分区内容是一致的时候才会使用2w3qaw
    2.2insert方式
      1）必须先将数据放在一个没有设置分区的普通表中
      2）该方式可以在一个分区内存储一个范围的内容
      3）从普通表中选出的字段不能包含分区字段
  3、适用于分区数少，分区名可以明确的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;动态分区-dpdynamic-partition&#34;&gt;动态分区 DP（dynamic partition）&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  1、根据分区字段的实际值，动态进行分区💽
  2、是在sql执行的时候进行分区
  3、需要先将动态分区设置打开（set hive.exec.dynamic.partition.mode=nonstrict ）
  4、只能用insert方式&lt;code&gt;insert into table partition(分区名) select () from table ..&lt;/code&gt;
  5、通过普通表选出的字段包含分区字段，分区字段放置在最后，多个分区字段按照分区顺序放置&lt;/p&gt;
&lt;p&gt;​		6、增加分区&lt;code&gt;alter ... add partition() localtion....&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​		7、删除分区后，将同时删除元数据和数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;54hive分桶&#34;&gt;5.4Hive分桶&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hive中的分桶是把数据分解为多个范围的概念，用于为数据提供额外的结构，以便用于更高效的查询。bucket的范围由一个或多个列的哈希值决定，这些列被称为“bucketing”列或者“clustering by”列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常的我们会在 &lt;strong&gt;😀分区数量有限或者分区的大小相对相等的情况下选择分区&lt;/strong&gt;，但是对于一些数据分布并不均等的情况，这种分区时不不理想的，因此引入了bucket的概念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果要使用分桶需要设置以下属性📜&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set hive.enforce.bucketing = true;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set hive.exec.dynamic.partition.mode=nonstrict;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建分桶&lt;code&gt;create table t_name() partitioned by() clustered by() into 几个 buckets.....&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加载数据&lt;code&gt;insert into table t_name partition() select ...from table_...&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;55hive模式设计&#34;&gt;5.5Hive模式设计&lt;/h3&gt;
&lt;h4 id=&#34;551日期表&#34;&gt;5.5.1日期表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按照日期分区来创建表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`create table data_table(id int,part string ) partitioned by(int date);`
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一次加载多个进程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;Hive可以在加载数据源后执行多个操作&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，而无需每次加载数据&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;like&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;selcet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;第二次查询就可以不屑&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;这是不是就是哪个&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qt1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hive三大引擎&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Hive中不同类型的文件
&lt;ul&gt;
&lt;li&gt;文本文件：默认文件，但是又很大的磁盘开销和数据解析开销&lt;/li&gt;
&lt;li&gt;序列文件：hadoop api提供的二进制文件，易于使用，可拆分，可压缩。以二进制格式存储&lt;/li&gt;
&lt;li&gt;自定义格式：用户可以通过实现iputformat和outputformat自定义输入和输出格式&lt;/li&gt;
&lt;li&gt;AVRO文件：它是一种文件格式加上一个序列化和反序列化框架&lt;/li&gt;
&lt;li&gt;列文件格式：不仅存储彼此相连的数据行，还存储彼此相邻的列值。因此数据集在水平和垂直方向都分了区。有三种重要的柱状文件格式 -RC文件 ORC文件 Parquet文件
&lt;ul&gt;
&lt;li&gt;RC文件：二进制键值对组成的平面文件，与序列化文件相似&lt;/li&gt;
&lt;li&gt;ORC文件：rc的更好版本：有更快的读取速度，但写入性能较差，提供显著的块压缩，可以用高压缩比进行压缩。&lt;/li&gt;
&lt;li&gt;Parquet：是一种Hadoop最著名的文件格式（柱状文件格式），以平面柱状格式存储嵌套数据结构，读取速度提升，但写入性能较差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;56导出hive数据&#34;&gt;5.6导出Hive数据&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir /jiaoben/ouput   

&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; hive.cli.print.header &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
insert overwrite &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; directory &lt;span class=&#34;s1&#34;&gt;&amp;#39;/jiaoben/ouput&amp;#39;&lt;/span&gt; row format delimited fields terminated by &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; lines terminated by &lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; * from wd&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;6hql语法&#34;&gt;6.HQL语法&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>Zookeeper</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/zookeeper/</link>
        <pubDate>Wed, 23 Feb 2022 15:22:46 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/zookeeper/</guid>
        <description>&lt;img src="https://yuxin-zh.github.io/AllForOne/p/zookeeper/b1.webp" alt="Featured image of post Zookeeper" /&gt;</description>
        </item>
        <item>
        <title>Spring</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/spring/</link>
        <pubDate>Wed, 16 Feb 2022 00:55:19 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/spring/</guid>
        <description>&lt;img src="https://yuxin-zh.github.io/AllForOne/p/spring/b5.jpg" alt="Featured image of post Spring" /&gt;</description>
        </item>
        <item>
        <title>Linux</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/linux/</link>
        <pubDate>Wed, 16 Feb 2022 00:54:24 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/linux/</guid>
        <description>&lt;img src="https://yuxin-zh.github.io/AllForOne/p/linux/b4.jpg" alt="Featured image of post Linux" /&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&#34;linux安装与配置&#34;&gt;LINUX安装与配置&lt;/h1&gt;
&lt;h2 id=&#34;1虚拟机安装&#34;&gt;1.虚拟机安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新建虚拟机，选择自定义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/1.png&#34;
	width=&#34;710&#34;
	height=&#34;672&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/1_huf4ddcba7b018411ebb2c40b85f98f9e6_79308_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/1_huf4ddcba7b018411ebb2c40b85f98f9e6_79308_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110052133&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;253px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选择默认版，然后下一步&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/2.png&#34;
	width=&#34;720&#34;
	height=&#34;670&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/2_hu8877ac138326ce8ef822256f391b6cd2_41656_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/2_hu8877ac138326ce8ef822256f391b6cd2_41656_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110149122&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;257px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后点击稍后安装操作系统&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/3.png&#34;
	width=&#34;710&#34;
	height=&#34;676&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/3_hudf30c15d18363c37d2454068d8124faa_48466_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/3_hudf30c15d18363c37d2454068d8124faa_48466_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110236313&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;252px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择centos 7 64位&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/4.png&#34;
	width=&#34;710&#34;
	height=&#34;662&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/4_huc7c1c73ec49477f67bce357149421cc7_33425_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/4_huc7c1c73ec49477f67bce357149421cc7_33425_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110344768&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;257px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更改安装位置到你希望安装的位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/5.png&#34;
	width=&#34;696&#34;
	height=&#34;658&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/5_hue8e02344b8e8f295696838de3e23f9de_27076_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/5_hue8e02344b8e8f295696838de3e23f9de_27076_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110449120&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;253px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以下电脑配置高的可以选择配置多个处理器&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/6.png&#34;
	width=&#34;701&#34;
	height=&#34;666&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/6_hu26291a486c4baabace888d2818bb0706_25401_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/6_hu26291a486c4baabace888d2818bb0706_25401_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110548327&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;252px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟机内存默认是1G，如果有需要可按需调配，这里配置4G&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/7.png&#34;
	width=&#34;711&#34;
	height=&#34;668&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/7_hu4911336d4c0851bd41623dee7befed0e_44859_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/7_hu4911336d4c0851bd41623dee7befed0e_44859_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110645172&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;255px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络类型选择使用仅主机模式网络&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/9.png&#34;
	width=&#34;709&#34;
	height=&#34;672&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/9_hu1deab3722b6dee465818ccbf4ee4b3f5_55644_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/9_hu1deab3722b6dee465818ccbf4ee4b3f5_55644_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110740366&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;253px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SCSI控制器选择LSI Logic（默认）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/10.png&#34;
	width=&#34;712&#34;
	height=&#34;674&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/10_hu02490f8a4825c935a0110861c89ac10a_34759_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/10_hu02490f8a4825c935a0110861c89ac10a_34759_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110830862&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;253px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁盘选择创建新的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/11.png&#34;
	width=&#34;715&#34;
	height=&#34;678&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/11_hud87ba32cb3d7f945622a0b24ed877100_55662_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/11_hud87ba32cb3d7f945622a0b24ed877100_55662_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110917795&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;253px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最大磁盘大小选择默认的20G&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/12.png&#34;
	width=&#34;710&#34;
	height=&#34;675&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/12_hu80f755a50aa331ba0242f2062035faa7_60229_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/12_hu80f755a50aa331ba0242f2062035faa7_60229_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216110959094&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;252px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/13.png&#34;
	width=&#34;717&#34;
	height=&#34;678&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/13_hu9250eb8aec1c5aecf9f358b47f1d61c5_46207_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/13_hu9250eb8aec1c5aecf9f358b47f1d61c5_46207_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216111151311&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;253px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2安装镜像&#34;&gt;2.安装镜像&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击编辑虚拟机设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/14.png&#34;
	width=&#34;423&#34;
	height=&#34;577&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/14_hu857702896287895f6b0198a39409b411_34139_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/14_hu857702896287895f6b0198a39409b411_34139_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216111449910&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;175px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击CD/DVD&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/15.png&#34;
	width=&#34;514&#34;
	height=&#34;444&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/15_hud561975c97d8f0e53ffd50415f03a514_27056_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/15_hud561975c97d8f0e53ffd50415f03a514_27056_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216111646912&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;277px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击使用ISO镜像文件，然后选择安装的cent的镜像&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/16.png&#34;
	width=&#34;499&#34;
	height=&#34;488&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/16_huf2b9f667226bee20e127f111ab23bef2_22950_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/16_huf2b9f667226bee20e127f111ab23bef2_22950_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216111841398&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;102&#34;
		data-flex-basis=&#34;245px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启虚拟机，选择install centos 7 回车&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/17.png&#34;
	width=&#34;951&#34;
	height=&#34;585&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/17_hu5166650234463793a5f6a8efa83d5429_38265_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/17_hu5166650234463793a5f6a8efa83d5429_38265_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216112012212&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;390px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装结束后选择中文&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/18.png&#34;
	width=&#34;798&#34;
	height=&#34;657&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/18_hu4f619da0c5bb5df8326e0ec2e0d407f9_104408_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/18_hu4f619da0c5bb5df8326e0ec2e0d407f9_104408_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216112135715&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;121&#34;
		data-flex-basis=&#34;291px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击软件选择&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/19.png&#34;
	width=&#34;938&#34;
	height=&#34;364&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/19_hu9983026a17100003445cfdf04ea74cbf_58876_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/19_hu9983026a17100003445cfdf04ea74cbf_58876_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216112234481&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;257&#34;
		data-flex-basis=&#34;618px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里我们选择最小安装，你也可以根据自己的需要选择&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/20.png&#34;
	width=&#34;1310&#34;
	height=&#34;789&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/20_hude8dddeb3a317effe42e59532d3cabac_376842_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/20_hude8dddeb3a317effe42e59532d3cabac_376842_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216112339907&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;398px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后是点击安装目标位置，直接 点击完成即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再点击网络和主机名，点击配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/21.png&#34;
	width=&#34;677&#34;
	height=&#34;501&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/21_hu07b3086f6417f3925b1d389d09059e24_33174_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/21_hu07b3086f6417f3925b1d389d09059e24_33174_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216112609255&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;324px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击ipv4设置，讲虚拟机设置静态ip，ip地址为192.168.xx.xx,&lt;strong&gt;注意将DNS服务器和网关设置一致，子网掩码设置为255.255.255.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/22.png&#34;
	width=&#34;615&#34;
	height=&#34;576&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/22_hua82b6dec12ebee00396b85d4b208dead_47594_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/22_hua82b6dec12ebee00396b85d4b208dead_47594_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216113112798&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;256px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击ipv6 切换为忽略，然后完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/23.png&#34;
	width=&#34;883&#34;
	height=&#34;813&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/23_hu10ddfaefbc0696a9d3e4b272f0477062_110302_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/23_hu10ddfaefbc0696a9d3e4b272f0477062_110302_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216113150112&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;108&#34;
		data-flex-basis=&#34;260px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/24.png&#34;
	width=&#34;1094&#34;
	height=&#34;694&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/24_hua2b69f05b3fcc498ac5c76befcb9589b_147051_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/24_hua2b69f05b3fcc498ac5c76befcb9589b_147051_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216114058471&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;378px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置主机名，点击应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/111.png&#34;
	width=&#34;796&#34;
	height=&#34;76&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/111_hu260acb6bfad29e9943141d32604c99fe_7092_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/111_hu260acb6bfad29e9943141d32604c99fe_7092_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1047&#34;
		data-flex-basis=&#34;2513px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置root密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/25.png&#34;
	width=&#34;896&#34;
	height=&#34;242&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/25_hu5498e2f53385c4dd5429f3b83b41a4d3_41830_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/25_hu5498e2f53385c4dd5429f3b83b41a4d3_41830_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216114342482&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;370&#34;
		data-flex-basis=&#34;888px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置完成后，重启。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/26.png&#34;
	width=&#34;1189&#34;
	height=&#34;774&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/26_huac8715755ac3fc2895561f1b634cc137_158761_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/26_huac8715755ac3fc2895561f1b634cc137_158761_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216114443133&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;153&#34;
		data-flex-basis=&#34;368px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可能需要等待一段时间&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/27.png&#34;
	width=&#34;694&#34;
	height=&#34;53&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/27_huab198866b07a8b0a4e0b914d5049553d_7945_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/27_huab198866b07a8b0a4e0b914d5049553d_7945_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216114529989&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1309&#34;
		data-flex-basis=&#34;3142px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入密码，登录成功 &lt;strong&gt;登陆时用户名为root，密码是你设置的那个密码&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改网络配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vi/etc/sysconfig/network-scripts/ifcfg-ens33
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/28.png&#34;
	width=&#34;492&#34;
	height=&#34;341&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/28_huf6aa12ff8dcdddc509e085c809a3c11c_7234_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/28_huf6aa12ff8dcdddc509e085c809a3c11c_7234_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216115403759&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;144&#34;
		data-flex-basis=&#34;346px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改如下配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;IPADDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.50.XX(这里的数字可以自己选择)&amp;#34;&lt;/span&gt; //IP地址
&lt;span class=&#34;nv&#34;&gt;PREFIX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;24&amp;#34;&lt;/span&gt; 
&lt;span class=&#34;nv&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.50.2&amp;#34;&lt;/span&gt;//网关
&lt;span class=&#34;nv&#34;&gt;DNS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.50.2 //DNS服务器&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后点击&lt;code&gt;service network restart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看ip地址&lt;code&gt;ifconfig&lt;/code&gt;,这样你的虚拟机就安装完成了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3配置虚拟机网络适配器&#34;&gt;3.配置虚拟机网络适配器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击网络适配器&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/29.png&#34;
	width=&#34;1312&#34;
	height=&#34;601&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/29_huf0af686e1eefe78bc362241e749bd15d_219644_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/29_huf0af686e1eefe78bc362241e749bd15d_219644_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216120459517&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;218&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击编辑&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/30.png&#34;
	width=&#34;1409&#34;
	height=&#34;625&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/30_hu5662ab787ece2ddfbbe533c1b6f0b75f_260468_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/30_hu5662ab787ece2ddfbbe533c1b6f0b75f_260468_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216120533512&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;225&#34;
		data-flex-basis=&#34;541px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后编辑ip地址信息&lt;code&gt;vi /etc/sysconfig/network-scripts/ifcfg-ens33&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;然后修改BOOTPROTO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;static
&lt;span class=&#34;nv&#34;&gt;ONBOOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;yes
&lt;span class=&#34;nv&#34;&gt;加上DNS2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8.8.8.8
然后按下ESC  输入&lt;span class=&#34;s2&#34;&gt;&amp;#34;:wq&amp;#34;&lt;/span&gt;  回车
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存后输入&lt;code&gt;systemctl restart network&lt;/code&gt;或&lt;code&gt;service network restart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4配置dns&#34;&gt;4.配置DNS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一次输入以下命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd /etc/NetworkManager&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vi NetworkManager.conf&lt;/code&gt;再最后添加dns=none&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后&lt;code&gt;vi /etc/resolv.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/31.png&#34;
	width=&#34;1085&#34;
	height=&#34;105&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/31_hudd58691a096b40e403684c5f482a8ace_13836_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/linux/31_hudd58691a096b40e403684c5f482a8ace_13836_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220216122105343&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1033&#34;
		data-flex-basis=&#34;2480px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入你之前保存的两个NDS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尝试ping &lt;a class=&#34;link&#34; href=&#34;http://www.baidu.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.baidu.com&lt;/a&gt;   内网&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ping 172.16.50.171  外网&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Hbase</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/hbase/</link>
        <pubDate>Wed, 16 Feb 2022 00:53:15 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/hbase/</guid>
        <description>&lt;img src="https://yuxin-zh.github.io/AllForOne/p/hbase/b3.jpg" alt="Featured image of post Hbase" /&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;https://www.jianshu.com/p/bcc54f63abe4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;hbase&#34;&gt;Hbase&lt;/h1&gt;
&lt;h2 id=&#34;1overview-hbase&#34;&gt;1.Overview Hbase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是一种分布式 可拓展 支持海量数据存储的NoSQL数据库&lt;/li&gt;
&lt;li&gt;hdfs不支持随机写，基于HDFS，hbase可以实现随时写&lt;/li&gt;
&lt;li&gt;hadoop和habase都是存储大量数据的 但不同的是hadoop的分布式文件系统中，数据分布在网络的不同节点中 而hbase是个数据库 列行的形式存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11数据模型&#34;&gt;1.1数据模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NameSpace：类似于关系数据库中的database概念，每个ns下有多个表。Hbase自带两个ns：hbase和default.hbase。 hbase存放的是HBase内置的表，default表是用户默认使用的命名空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Region：表的切片 。刚开始创建就一个region&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Row：Hbase表中的每行数据都由一个Rowkey和多个列组成，数据是按照Rowkey的字典序进行存储的，&lt;strong&gt;并且查询时只能根据rowkey进行查询&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Column：hbase每个列都由Column Family和Column Qualifier（列限定符）进行限定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TimeStamp：用于标识数据的不同版本，数据仔写入时，不指定的话，系统会自动为其加上该字段，值为写入hbase的时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cell：由{Rowkey，clolumn Family，clolumn Qualifier，timeStamp}唯一确定的单元，&lt;strong&gt;cell中的数据是没有类型的，全部是字节码的形式存在。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-hbase基本架构&#34;&gt;1.2 Hbase基本架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Store&amp;ndash;&amp;gt;Region&amp;ndash;&amp;gt;Region Server(分布式服务)
&lt;ul&gt;
&lt;li&gt;RegionServer：DML 对表中数据进行操作
&lt;ul&gt;
&lt;li&gt;Data：get，put（提交新数据覆盖元数据，而不是修改元数据），delete&lt;/li&gt;
&lt;li&gt;Region：splitRegion，compactRegion     切分和合并&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Master挂掉的话，数据的增删改查仍可以，但是做表结构的不行  &lt;strong&gt;master管理ddl&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Master：DDL 对表进行操作
&lt;ul&gt;
&lt;li&gt;Table：create,delete,alter  &lt;strong&gt;关于表进行操作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;RegionServer：分配Regions到每个Regionserver，监控每个RegionServer的status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Zookeeper：&lt;strong&gt;HBase通过Zookeeper来做master的高可用&lt;/strong&gt;、RegionServer的监控，元数据的入口以及集群配置的维护等工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-hbase的安装和配置&#34;&gt;1.3 Hbase的安装和配置&lt;/h3&gt;
&lt;h3 id=&#34;14-hbase-shell操作&#34;&gt;1.4 HBase Shell操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#general&lt;/span&gt;
status：
&lt;span class=&#34;c1&#34;&gt;#ddl&lt;/span&gt;
alter：
1）add 列族到表中
alter &lt;span class=&#34;s1&#34;&gt;&amp;#39;表名&amp;#39;&lt;/span&gt;，NAME&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;列族名&amp;#39;&lt;/span&gt;，VERSIONS&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;5
alter &lt;span class=&#34;s1&#34;&gt;&amp;#39;t1&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;f1&amp;#39;&lt;/span&gt;, &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f2&amp;#39;&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;IN_MEMORY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; true&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;, &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f3&amp;#39;&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;VERSIONS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; 5&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; delte 列族
alter &lt;span class=&#34;s2&#34;&gt;&amp;#34;ns:表名&amp;#34;&lt;/span&gt;,NAME&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;列族名&amp;#39;&lt;/span&gt;，METHOD&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;
alter &lt;span class=&#34;s1&#34;&gt;&amp;#39;ns:表名&amp;#39;&lt;/span&gt;,&lt;span class=&#34;s1&#34;&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;f1&amp;#39;&lt;/span&gt;

3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;change table-scope的属性 like below
alter &lt;span class=&#34;s1&#34;&gt;&amp;#39;table 
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;name&amp;#39;&lt;/span&gt;,MAX_FILESIZE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;134217728&amp;#39;&lt;/span&gt;

4&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;设置coprocessor   不知道是否仔niit范围内，可以课下学学

5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 通过hbase命令行设置habse的配置信息

6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; Regin_Replication
alter &lt;span class=&#34;s1&#34;&gt;&amp;#39;table_name&amp;#39;&lt;/span&gt;,&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REGION_REPLICATION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;2&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

7&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;disable/enable table split or merge
alter &lt;span class=&#34;s1&#34;&gt;&amp;#39;tn&amp;#39;&lt;/span&gt;,&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SPLIT_ENABLED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;false&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
alter &lt;span class=&#34;s1&#34;&gt;&amp;#39;tn&amp;#39;&lt;/span&gt;,&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;MERGE_ENABLED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;false&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

alter_status:#Get the status of the alter command. Indicates the number of regions of thetable that have received the updated schema ,Passed by table name.

create:
create &lt;span class=&#34;s1&#34;&gt;&amp;#39;ns:tn&amp;#39;&lt;/span&gt;,&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,VERSIONS&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,&lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;,&lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;
desc &lt;span class=&#34;s1&#34;&gt;&amp;#39;ns;tn&amp;#39;&lt;/span&gt;

disable:
disable &lt;span class=&#34;s1&#34;&gt;&amp;#39;ns:tn&amp;#39;&lt;/span&gt;
disable_all

drop: should be executed after &lt;span class=&#34;s2&#34;&gt;&amp;#34;disable&amp;#34;&lt;/span&gt;
drop &lt;span class=&#34;s1&#34;&gt;&amp;#39;ns:tn&amp;#39;&lt;/span&gt;
drop_all

enable:
&lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ns:tn&amp;#39;&lt;/span&gt;
enable_all

exits:判断表是否存在
exists &lt;span class=&#34;s1&#34;&gt;&amp;#39;ns;tb&amp;#39;&lt;/span&gt;

get_table: &lt;span class=&#34;c1&#34;&gt;#Get the given table name and return it as an actual object to be manipulated by the user&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;#namespacelis&lt;/span&gt;

create_namespace &lt;span class=&#34;s1&#34;&gt;&amp;#39;ns1&amp;#39;&lt;/span&gt;
describe_namespace &lt;span class=&#34;s1&#34;&gt;&amp;#39;ns1&amp;#39;&lt;/span&gt; desc不行
drop_namespace &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
list_namespace

&lt;span class=&#34;c1&#34;&gt;#DML&lt;/span&gt;
append &lt;span class=&#34;s1&#34;&gt;&amp;#39;t1&amp;#39;&lt;/span&gt;,&lt;span class=&#34;s1&#34;&gt;&amp;#39;r1&amp;#39;&lt;/span&gt;,&lt;span class=&#34;s1&#34;&gt;&amp;#39;c1&amp;#39;&lt;/span&gt;,&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;相当于String的append value加在原有value的后

count: 计数一个表中的row数量
count &lt;span class=&#34;s1&#34;&gt;&amp;#39;tn&amp;#39;&lt;/span&gt;
或者建立一个t-&amp;gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tn&amp;#39;&lt;/span&gt;的reference
t.count也可以

&lt;span class=&#34;c1&#34;&gt;#####Get &amp;amp;&amp;amp;&amp;amp;&amp;amp; Scan&lt;/span&gt;

get的最大范围是指定到rowkey，甚至还可以指定到时间戳
&lt;span class=&#34;c1&#34;&gt;#利用scan查看同一个cell之前已经put的数据（scan时可以设置是否开启RAW模式，开启RAW模式会返回已添加删除标记但是未实际进行删除的数据）&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#get获取某个cell保留的（未添加删除标记）的所有version数据（在describe 表名，查看列族VERSIONS是多少，get就会多少数据(cell的数据大于等于VERSIONS的数量)）&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;15hbase的读写流程&#34;&gt;1.5Hbase的读写流程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;对于hbase来说  读比写要慢&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写流程
&lt;ul&gt;
&lt;li&gt;like put的流程：首先client会&amp;mdash;-请求meta表所在的RegionServer&amp;mdash;&amp;gt; ZooKeeper&amp;mdash;-meta:hadoop02&amp;mdash;&amp;ndash;&amp;gt;client   &lt;strong&gt;meta表存的就是元数据&lt;/strong&gt;    然后client&amp;mdash;请求meta&amp;mdash;-&amp;gt;hadoop02&amp;mdash;&amp;mdash;返回meta 获取RS&amp;mdash;&amp;ndash;&amp;gt;client&amp;mdash;&amp;ndash;元数据存入缓存&amp;mdash;&amp;ndash;&amp;gt;meta cache(下次查找会先查询缓存，不存在则请求ZK)  找到后client&amp;mdash;发送Put请求&amp;mdash;-&amp;gt;RegionServer&amp;mdash;&amp;gt;wal&amp;mdash;-&amp;gt;memstore&amp;mdash;&amp;ndash;&amp;gt;client&lt;/li&gt;
&lt;li&gt;注意windows时间与linux时间未统一的话，不要传时间戳参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;16hbase特性&#34;&gt;1.6Hbase特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;容量大&lt;/li&gt;
&lt;li&gt;面向列&lt;/li&gt;
&lt;li&gt;稀疏性：null的空列不占用存储空间&lt;/li&gt;
&lt;li&gt;拓展性：Hbase可以动态增加regionserver&lt;/li&gt;
&lt;li&gt;高性能：LSM数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;17应用场景&#34;&gt;1.7应用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;搜索引擎&lt;/li&gt;
&lt;li&gt;增量数据存储&lt;/li&gt;
&lt;li&gt;OPENTSDB&lt;/li&gt;
&lt;li&gt;捕捉用户交互数据&lt;/li&gt;
&lt;li&gt;广告效果和点击流&lt;/li&gt;
&lt;li&gt;内容服务&lt;/li&gt;
&lt;li&gt;信息交换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;18hbase与关系型数据库的区别&#34;&gt;1.8Hbase与关系型数据库的区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HBase 里面有以下 2 个主要概念：
&lt;ul&gt;
&lt;li&gt;Rowkey: HBase 中的记录是按照 rowkey 来排序的；&lt;/li&gt;
&lt;li&gt;Column family：(列族)是在系统启动之前预先定义好的；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HBase 优缺点：
&lt;ul&gt;
&lt;li&gt;不支持条件查询以及 orderby 等查询；&lt;/li&gt;
&lt;li&gt;列可以动态增加，列为空则不存储数据，节省存储空间；&lt;/li&gt;
&lt;li&gt;会自动切分数据；&lt;/li&gt;
&lt;li&gt;可以提供高并发读写操作的支持；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意事项
&lt;ul&gt;
&lt;li&gt;Row key 行键 (Row key)可以是任意字符串(最大长度是 64KB，实际应用中长度一般为 10- 100bytes)，在 hbase 内部，row key 保存为字节数组。&lt;/li&gt;
&lt;li&gt;列族是表的 schema 的一部分(而列不是)，必须在使用表 之前定义。&lt;/li&gt;
&lt;li&gt;HBase 中通过 row 和 columns 确定的为一个存贮单元称为 cell。每个 cell 都保存着同一份数据的 多个版本&lt;/li&gt;
&lt;li&gt;cell 中的数据是没有 类型的，全部是字节码形式存贮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HBASE 强依赖 hadoop 的 hdfs 系统，hbase 的版本需要和 hadoop 的版本匹配，否则会出现一些意 外情况&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;19hbase的启动命令&#34;&gt;1.9hbase的启动命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动单机模式：&lt;strong&gt;bin/start-hbase.sh&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;查看进程：&lt;strong&gt;jps&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;启动集群：start-hbase。sh&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2hbase基础&#34;&gt;2.Hbase基础&lt;/h2&gt;
&lt;h3 id=&#34;21-hbase表的物理属性&#34;&gt;2.1 Hbase表的物理属性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Table 在行的方向上分割为多个 Region；&lt;/li&gt;
&lt;li&gt;Region 按大小分割的，每个表开始只有一个 region，随着数据增多，region 不断增 大，当增大到一个阀值的时候，region 就会等分会两个新的 region，之后会有越来 越多的 region；&lt;/li&gt;
&lt;li&gt;Region 是 Hbase 中分布式存储和负载均衡的&lt;strong&gt;最小单元&lt;/strong&gt;，&lt;strong&gt;不同 Region 分布到不同 RegionServer 上。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22region&#34;&gt;2.2Region&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Region组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Region 由一个或者多个 Store 组成，每个 store 保存一个 columns family；&lt;/li&gt;
&lt;li&gt;每个 Strore 又由一 个 memStore 和 0 至多个 StoreFile 组成，StoreFile 包含 HFile；memStore 存储在内存中， StoreFile 存储在 HDFS 上&lt;/li&gt;
&lt;li&gt;Region 虽然是分布式存储的最小单元，但并不是存储的最小单元，Region 默认大小是 256M，当一个 Region 大小超过设置的值，Hmaster 会将 Region 拆分为 2 个子 Region，同时父 Region 下线。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RegionServer(DML)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Region server 维护 Master 分配给它的 region，处理对这些 region 的 IO 请求 &lt;/li&gt;
&lt;li&gt;Region server 负责切分在运行过程中变得过大的 regio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hmaster&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理用户对 Table 的增、删、改、查操作 &lt;/li&gt;
&lt;li&gt;管理 RegionServer 的负载均衡、调整 Region 的分布 &lt;/li&gt;
&lt;li&gt;在 Region Split 后，将新 Region 分布到不同的RegionServer。 &lt;/li&gt;
&lt;li&gt;在 RegionServer 宕机后，那该 RegionServer 上所管理的 Region 由 HMaster 进行重新分 配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HbaseAdmin：提供接口关系 HBase 数据库中的表信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;HBaseAdmin&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;admin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HBaseAdmin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTableDescriptor:维护表的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;setMaxFileSize&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;指定最大的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;region&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;setMemStoreFlushSize&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;指定&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memstore&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;到&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HDFS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;上的文件大小&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;通过&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addFamily&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;方法增加&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;famil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HColumnDescriptor: 代表的是 column 的 schema，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nl&#34;&gt;setTimeToLive:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;指定最大的&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;单位是&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;过期数据会被自动删除&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setInMemory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;指定是否放在内存中&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;对小表有用&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;可用于提高效率&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;默认关闭&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setBloomFilter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;指定是否使用&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BloomFilter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;可提高随机查询效率&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;默认关闭&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setCompressionType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;设定数据压缩类型&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;默认无压缩&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setMaxVersions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;指定数据最大保存的版本个数&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;默认为&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;HTableDescriptor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;htd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newHTableDescriptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tablename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;htd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addFamily&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HColumnDescriptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;“&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myFamily&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3&#34;&gt;3.&lt;/h2&gt;
&lt;h3 id=&#34;1hbase的存储逻辑&#34;&gt;1.HBase的存储逻辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HBase 的表中的数据分隔是使用列族而不是列。每个列族对应一个 HFile 文件，在 HDFS 上以一个 目录的形式存放。&lt;/li&gt;
&lt;li&gt;Key-Value存储模型：
&lt;ul&gt;
&lt;li&gt;key是RowKey，Value是列族的集合。&amp;mdash;&amp;gt;也就是说我们可以通过rowkey检索到value&lt;/li&gt;
&lt;li&gt;行键的设计：、
&lt;ul&gt;
&lt;li&gt;表扫描是对行键的操作，所以，&lt;strong&gt;行键的设计控制着你能够通过 HBase 执行的实时/直接获取量。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当在生产环境中运行 HBase 时，它在 HDFS 上部运行，数据基于行键通过 HDFS，如果你所有的 行键都是以 user-开头，那么很有可能你大部分数据都被分配一个节点上（违背了分布式数据 的初衷），因此，你的行键应该是有足够的差异性以便分布式地通过整个部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在Hbase中表可以设计为高表(tall-narrow table)和宽表(flat-wide table)的形式  高表指的是列少行多  宽表反之&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Hadoop Learning</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/hadoop-learning/</link>
        <pubDate>Wed, 16 Feb 2022 00:42:52 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/hadoop-learning/</guid>
        <description>&lt;img src="https://yuxin-zh.github.io/AllForOne/p/hadoop-learning/b2.jpg" alt="Featured image of post Hadoop Learning" /&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;hadoop相关概念&#34;&gt;Hadoop相关概念&lt;/h1&gt;
&lt;p&gt;BIg Data&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;	Volume  
	Velocity（快速） 
	Variety (结构化数据和非结构化数据)
	Value(低价值密度)：价值密度的大小与数据总量的大小成反比
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;HIVE：存储 查询和分析存储在hdfs上的大量数据&lt;/p&gt;
&lt;p&gt;缺点 ：不支持事务，不可以修改数据，只可以通过文件追加和重新上传  速度很慢&lt;/p&gt;
&lt;p&gt;ZOOkeeper“zn+1哥服务器允许n此错误。&lt;/p&gt;
&lt;p&gt;结构化数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;数据库这种有二维表格的
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;半结构化数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;类似于一个文件，但是可以导入mysql这种结构化数据中
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;非结构化数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;无法转化，视频，ppt等
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Hadoop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;分布式系统基础架构：多台服务器共同完成某一任务
主要解决海量数据的存储和分析计算
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;三大发行版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Apache 最基础
Cloudera   Horntownworks

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Hadoop优势&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;高可靠性：底层维护多个数据副本，即使某个元素或存储出现故障，data-loss is avoided
高扩展性：在集群间分配任务数据，可方便扩展节点，动态增加和动态删除
高效性：hadoop是并行工作的
高容错性：能够自动将失败任务重新分配
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;hadoop组成（important）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Hadoop 1.x:
	HDFS:数据存储   
	Mapduce：计算+资源调度
	Common：辅助工具
Hadoop 2.x:
	多了Yarn用于资源调度
Hadoop 3.x：
	在组成上没有区别
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;HDFS数据存储&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;NameNode:存储文件的元数据，如文件名，文件目录结构，文件属性等 保存在linux中
DataNode：存储文件块数据，以及快数据的校验和{
	文件块：最基本的存储单位
	HDFS默认的block大小是64MB（老版本)
	不同于普通文件系统的是，如果一个文件小于一个数据块的大小，并不占用整个数据块存储空间
	Replication：多复本  默认是三个，可通过配置文件配置
}
2NN:每隔一段时间对NameNode元数据备份,只能恢复一部分数据而非所有
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;关于replication的解析：&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Yarn架构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Resource Manager:管理整个集群资源  rm将资源部份安排给基础大的Node Manager
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	*NM遵循来自RM的一些指令来管理单一节点上的可用资源
	*AM负责与RM协商资源并于NM合作启动容器
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
Node Manager:管理单个节点的服务器资源  是yarn中每个节点上的代理  与RM通讯 监督container的生命周期
ApplicationMaster：单个运行任务的boss 流程如下
	和rm协商，获取资源 通过rm来获取任务 和NM启动任务 Map或Reduce
---------------	
Container：容器，相当于于一台独立服务器，封装任务运行需要的资源  封装的是某个DataNode节点上的资源
AppMaster请求资源时，RM以container的形式返回资源

Scheduler:资源调度器根据队列容量，队列限制，为每个应用分配一定的资源。（只是单纯的资源调度，不参与任何任务状态管理）
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;MapReduce架构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;计算分为两个阶段：Map 和Reduce
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/1.png&#34;
	width=&#34;2340&#34;
	height=&#34;1080&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/1_hu6d73c86b86e7571b9382801cf6222d7f_493148_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/1_hu6d73c86b86e7571b9382801cf6222d7f_493148_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210913180309582&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;216&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;HDFS&amp;amp;Yarn&amp;amp;MapReduce&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;remain to be &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Hadoop运行模式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Local:数据存储再linux本地，从本地读取  ~测试偶尔会用
伪分布式（pseudo-distributed）：数据存储在HDFS ~公司比较差钱
完全分布式（fully-distributed）:数据也是存储在HDFS，但是多台服务器工作 ~大量使用
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;tip&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;后续写的mapreduce程序必须指定对应的输入路径和输出路径，而且输出路径还不能存在，存在的话会直接抛出异常。 Get it!
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Hadoop官方文档：&lt;/strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://hadoop.apache.org/docs/current/api/org/apache/hadoop/fs/FileSystem.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FileSystem (Apache Hadoop Main 3.3.1 API)&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;hdfs&#34;&gt;HDFS&lt;/h1&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;分布式文件系统，建立在一次写入，多次读取的思想上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个hdfs集群是由一个namenode和多个datanode形成&lt;/strong&gt;，内部机制是将一个文件分割成一个或多个的block，这些块储存在一组数据节点中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;namenode负责文件或目录的“打开，关闭，重命名等”,并确定块与数据节点的映射。而数据节点负责来自文件系统客户的读写请求&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;hdfs-块&#34;&gt;HDFS 块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;默认的最基本的存储单位是64M的数据块**（默认大小在hadoop2.x版本中是128M，老版本中是64M）**&lt;/li&gt;
&lt;li&gt;HDFS的文件是被分成64M一块的数据块进行存储的&lt;/li&gt;
&lt;li&gt;HDFS中若一个文件大小小于64M，并不占用整个存储空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1hadoop-block存放策略&#34;&gt;1）hadoop block存放策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一个block放在client所在的node里面&lt;/li&gt;
&lt;li&gt;第二个放在与第一个不同的机架中的node中&lt;/li&gt;
&lt;li&gt;第三个放在与第一个块的同一个机架的不用node中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2namenode和datanode&#34;&gt;2）NameNode和DataNode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NameNode(元数据节点)：用来管理文件系统的命名空间
&lt;ul&gt;
&lt;li&gt;将所有文件和文件夹的元数据保存在一个system tree上（ 元数据 ：指用来描述一个 文件 的特征的系统数据，诸如访问权限、 文件 拥有者、以及 文件 数据块的分布信息等等）&lt;/li&gt;
&lt;li&gt;也同时会在硬盘上保存成这些文件：namespace image 和editlog&lt;/li&gt;
&lt;li&gt;也存储了一个文件包含哪些数据块，分布在哪些数据节点上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意：这些信息并不真正存储在硬盘 而是存放在数据节点中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;client和namenode可以向数据节点请求写入或者读出数据块，并周期性的向namenode汇报其存储的数据块信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元数据节点目录结构：在hdfs-site.xml中配置dfs.name.dir参数&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;namespaceID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;123214214&lt;/span&gt; 文件系统的唯一标识符 在文件系统初始化时生成的
&lt;span class=&#34;nv&#34;&gt;ClusterID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;xxxxxxxxx   系统生成或手动指定的集群ID，可以在-clusteid选项中使用
&lt;span class=&#34;nv&#34;&gt;cTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;               0此处标识namenode的创建时间，更新nd后会更新时间戳
&lt;span class=&#34;nv&#34;&gt;storageType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;NAME_NODE 表示此文件夹中保存的是元数据节点的数据结构
LayoutVersion 		  保存格式版本号
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/2.png&#34;
	width=&#34;1386&#34;
	height=&#34;736&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/2_hu115e04f43b127b90fd44e1735f6f134b_265774_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/2_hu115e04f43b127b90fd44e1735f6f134b_265774_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211127201044656&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;451px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;checkpoint的作用：1）保证数据库的一致性，这是指将脏数据写入到硬盘，保证内存和硬盘上的数据是一样的;2）缩短实例恢复的时间&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;3hdfs通信协议&#34;&gt;3）HDFS通信协议&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/3.png&#34;
	width=&#34;1350&#34;
	height=&#34;296&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/3_hu5fd8fe86c85adec8a205f1774f8e7cc2_246538_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/3_hu5fd8fe86c85adec8a205f1774f8e7cc2_246538_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211127211253785&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;456&#34;
		data-flex-basis=&#34;1094px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;4hdfs的安全模式&#34;&gt;4）HDFS的安全模式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/4.png&#34;
	width=&#34;1342&#34;
	height=&#34;273&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/4_huc649dcf599d37fd25fc28a9ab18450dd_290897_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/4_huc649dcf599d37fd25fc28a9ab18450dd_290897_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211127211332872&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;491&#34;
		data-flex-basis=&#34;1179px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;5客户端读文件&#34;&gt;5）客户端读文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//工具类获取FileSystem
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uri&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;域名&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//like &amp;#34;hdfs://niit1:9000&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Configuration&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Configuration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;你的用户名,也可以不加，区别建议查阅官方API&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uri&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hdfs://niit1:9000&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Configuration&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Configuration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file_content_buff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello hadoop world,test write file! \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//以字节数组的形式读取字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/user/root/niit/nn.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//写入文件路径
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;FSDataOutputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outputStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//create file两种形式 1）使用setpermission提供的权限来设置权限 2）将配置中的umask改为0---&amp;gt;但并非线程安全的
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;outputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file_content_buff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file_content_buff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//写入文件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;static FileSystem&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;get(URI uri, Configuration conf)&lt;/code&gt;Get a FileSystem for this URI&amp;rsquo;s scheme and authority.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static FileSystem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;get(URI uri, Configuration conf, String user)&lt;/code&gt;Get a FileSystem instance based on the uri, the passed in configuration and the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;6客户端写文件&#34;&gt;6）客户端写文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetFileSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//GetFileSystem是上面的工具类 用来获取FileSystem
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//Opens an FSDataInputStream at the indicated Path.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/user/root/niit/nn1.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;IOUtils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;copyBytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//(InputStream in, OutputStream out, int buffSize, boolean close)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;IOUtils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;closeStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;7本地文件上传到hdfs&#34;&gt;7）本地文件上传到HDFS&lt;/h3&gt;
&lt;p&gt;使用 &lt;strong&gt;copyFromLocalFile&lt;/strong&gt;接口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetFileSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;本地文件路径&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;desc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;目标路径&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;copyFromLocalFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;8重命名文件&#34;&gt;8）重命名文件&lt;/h3&gt;
&lt;p&gt;使用rename（抽象类）返回布尔值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt; &lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetFileSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//已经在classpath下面加载了hdfs-site.xml和core-site.xml的配置文件，则会自动理解输入的文件路径为hdfs的
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CurrentName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;当前文件路径及文件名&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;desName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;目标文件名&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//是否可以同时修改文件路径?YESSSSSSS!!!!
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;rename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CurrentName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;修改成功&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;修改失败&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;9delete-file--directory&#34;&gt;9）Delete File &amp;amp; Directory&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetFileSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delef&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;删除的目标地址&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deleRe&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delef&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deleRe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;10创建目录和遍历目录&#34;&gt;10）创建目录和遍历目录&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;创建过程和删除相似  无非是使用了mkdirs接口罢了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;遍历目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetFileSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;FileStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fsstatus&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;listStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/user/root&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileStatus&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fsstatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;file:&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;directory:&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;abstract FileStatus[]&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;listStatus(Path f)&lt;/code&gt;List the statuses of the files/directories in the given path if the path is a directory.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FileStatus[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;listStatus(Path[] files)&lt;/code&gt;Filter files/directories in the given list of paths using default path filter.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FileStatus[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;listStatus(Path[] files, PathFilter filter)&lt;/code&gt;Filter files/directories in the given list of paths using user-supplied path filter.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FileStatus[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;listStatus(Path f, PathFilter filter)&lt;/code&gt;Filter files/directories in the given path using the user-supplied path filter.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;hadoopshell-commands&#34;&gt;HadoopShell Commands&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;n&#34;&gt;阿巴阿巴&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;hadoop-io&#34;&gt;Hadoop IO&lt;/h1&gt;
&lt;h2 id=&#34;1序列化&#34;&gt;1）序列化&lt;/h2&gt;
&lt;p&gt;序列化：&lt;strong&gt;将结构化对象转化为字节流以便于通过网络进行传输或写入持久存储的过程 反序列化则反之&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Compact: 方便网络传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast：性能好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extensible：协议有变化 可以支持新的需求（动态）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interoperable：客户端和服务器端不依赖语言的实现（怎么去理解）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hadoop使用writables，满足compact fast 但是不满足拓展性 （这种序列化时hadoop自己实现的，而不是java的序列化）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Serialization&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; 
 &lt;span class=&#34;c1&#34;&gt;//客户端用于判断序列化实现是否支持该类对象 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;c1&#34;&gt;//获得用于序列化对象的 Serializer 实现 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Serializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getSerializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;c1&#34;&gt;//获得用于反序列化对象的 Deserializer 实现 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Deserializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDeserializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; 


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2序列化流程&#34;&gt;2）序列化流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果需要**使用 Serializer **来执行序列化，一般需要通过 &lt;strong&gt;open()&lt;strong&gt;方法打开 Serializer，open()方法传入一个 底层的流对象，然后就可以使用&lt;/strong&gt;serialize()方法序列化对象&lt;/strong&gt;到底层的流中。最后序列化结束时，通过 close()方法关闭 Serializer。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Serializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; 
 &lt;span class=&#34;c1&#34;&gt;//为输出（序列化）对象做准备 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OutputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
 
&lt;span class=&#34;c1&#34;&gt;//将对象序列化到底层的流中 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
 
&lt;span class=&#34;c1&#34;&gt;//序列化结束，清理 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3反序列化&#34;&gt;3）反序列化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果要使用 &lt;strong&gt;deserializer&lt;/strong&gt; 来执行反序列化，一般需要通过 open()方法打开 deserializer，open()方法传入 一个底层的流对象，然后就可以使用 deserializer()方法反序列化流到对象中。最后反序列化结束时， 通过 close()方法关闭 Serializer。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;deserializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deserialize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4writable接口&#34;&gt;4）Writable接口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hadoop 的所有可序列化对象都必须实现 这个接口。Writable 接口里有两个方法，一个是 write 方法，将对象写入字节流，另一个是 readFields 方法，从字节流解析出对象&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;IntWritable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;intWritable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IntWritable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//生成流对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byteArrayOutputStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;DataOutputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataOutputStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;byteArrayOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//DataStream封装byteStream
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//Serilization the data  序列化对象到流中
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;intWritable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byteArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byteArrayOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toByteArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;dataOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;byteArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byteArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deserialize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;barr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;IntWritable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;intWritable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IntWritable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ByteArrayInputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byteArrayinputStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;barr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;DataInputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;byteArrayinputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;intWritable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readFields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;intWritable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;//writable必不可少
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/5.png&#34;
	width=&#34;1466&#34;
	height=&#34;696&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/5_hudc5020dc62f5b8fce39e63326cca4045_188636_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/5_hudc5020dc62f5b8fce39e63326cca4045_188636_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211128155901456&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;505px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;5writablecomparable&#34;&gt;5）WritableComparable&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WritableComparable 接口是可序列化并且可比较的接口，MapReduce 中所有的 key 值类型都必须实现 这个接口。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6压缩smile&#34;&gt;6）压缩:smile:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GZIP:
&lt;ul&gt;
&lt;li&gt;压缩率较高，速度较快，hadoop本身就支持，使用方便，支持 hadoop native 库&lt;/li&gt;
&lt;li&gt;不支持split&lt;/li&gt;
&lt;li&gt;当每个文件压缩之后在 130M 以内的（1 个块大小内），都可以考虑用 gzip 压缩格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LZO：
&lt;ul&gt;
&lt;li&gt;压缩速度很快，压缩率合理，支持split，hadoop最流行的压缩格式&lt;/li&gt;
&lt;li&gt;压缩率比gzip低，hadoop本身并不支持，需要安装&lt;/li&gt;
&lt;li&gt;应用场景：一个很大的文本文件，压缩之后还大于 200M 以上的可以考虑，而且单个文件越大，lzo 优点越越明显。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Snappy:
&lt;ul&gt;
&lt;li&gt;高速压缩速度和合理的压缩率；支持 hadoop native 库&lt;/li&gt;
&lt;li&gt;不支持 split；压缩率比 gzip 要低；hadoop 本身不支持，需要安装；linux 系统下没有对应 的命令。&lt;/li&gt;
&lt;li&gt;应用场景：mapreduce中map输出的数据较大，可作为map到reduce的中间数据的压缩格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bzip2
&lt;ul&gt;
&lt;li&gt;支持 split；具有很高的压缩率，比 gzip 压缩率都高；hadoop 本身支持，但不支持 native&lt;/li&gt;
&lt;li&gt;压缩/解压速度慢；不支持 native。&lt;/li&gt;
&lt;li&gt;适合对速度要求不高，但需要较高的压缩率的时候，可以作为 mapreduce 作业的输出格 式；或者输出之后的数据比较大，处理之后的数据需要压缩存档减少磁盘空间并且以后数据用得比 较少的情况；或者对单个很大的文本文件想压缩减少存储空间，同时又需要支持 split，而且兼容之 前的应用程序（即应用程序不需要修改）的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CompressionCodec 对流进行压缩和解压缩&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每一种编码器(Compressor)/解码器(Decompressor)最后统一的交由编码解码器(CompressionCodec) 来管理&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/13.png&#34;
	width=&#34;1486&#34;
	height=&#34;510&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/13_hu980d255d7092880c05cc42fe4286f944_88295_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/13_hu980d255d7092880c05cc42fe4286f944_88295_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211128162410728&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;291&#34;
		data-flex-basis=&#34;699px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;暂时没搞明白-实现原理sob&#34;&gt;暂时没搞明白 实现原理。:sob:&lt;/h3&gt;
&lt;h2 id=&#34;7特殊文件处理-cry&#34;&gt;7）特殊文件处理 :cry:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;需求：在处理小文件上低效率和小号磁盘空间的问题&lt;/li&gt;
&lt;li&gt;SOlUTION:使用容器：SequenceFile  MapFile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SequenceFile：一种二进制文件支持，直接将&amp;lt;key,value&amp;gt;对序列化到文件中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持压缩，定制基于record或block压缩&lt;/li&gt;
&lt;li&gt;简单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在SequenceFile文件中，每一个KV被看作一条记录，所以基于Record的压🔒策略，可以支持三种压缩类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;None：对record不压缩&lt;/li&gt;
&lt;li&gt;RECORD:仅仅压缩每一个record中的value&lt;/li&gt;
&lt;li&gt;BLOCK:将一个block中所有records压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;创建SequenceFile&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Remains&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;rpc协议&#34;&gt;RPC协议&lt;/h1&gt;
&lt;h2 id=&#34;1定义&#34;&gt;1）定义&lt;/h2&gt;
&lt;p&gt;远程方法调用，允许计算机程序远程调用另一台计算机的子程序。&lt;/p&gt;
&lt;h2 id=&#34;2feature&#34;&gt;2）Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;透明性：远程调用其他机器上的程序，对用户来说就像是调用本地方法一样；&lt;/li&gt;
&lt;li&gt;高性能：RPC server 能够并发处理多个来自 Client 的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3cs-模式&#34;&gt;3）C/S 模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Client 端发送一个带有参数的请求信息到 Server&lt;/li&gt;
&lt;li&gt;Server 接收到这个请求以后，根据发送过来的参数调用相应的程序，然后把自己计算好的结果 发送给 Client 端；&lt;/li&gt;
&lt;li&gt;Client 端接收到结果后继续运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;hadoop-prc机制&#34;&gt;Hadoop prc机制&lt;/h1&gt;
&lt;h4 id=&#34;1rpc设计要求&#34;&gt;1.RPC设计要求&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;序列化层：C与S端通信采用了hadoop的序列化类或自定Writable类型&lt;/li&gt;
&lt;li&gt;函数调用层：Hadoop RPC通过动态代理以及java反射实现函数调用&lt;/li&gt;
&lt;li&gt;网络传输层：采用了基于TCP/IP的socket机制&lt;/li&gt;
&lt;li&gt;服务器端框架层：知识盲区&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心框架原理&#34;&gt;核心框架原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;优点：易于编程，只用关系业务逻辑
&lt;ul&gt;
&lt;li&gt;良好拓展性：可以动态增加服务器，解决计算资源不够的问题&lt;/li&gt;
&lt;li&gt;高容错性：任何一台机器挂掉，可以将任务转移到其他节点&lt;/li&gt;
&lt;li&gt;适合海量数据的计算（TB/PB) 几千台服务器共同计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不擅长实时计算（mysql这样的擅长）&lt;/li&gt;
&lt;li&gt;不擅长流式计算（Sparkstreaming flink）&lt;/li&gt;
&lt;li&gt;不擅长DAG有向无环图计算 spark&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1mapreduce阶段引用图&#34;&gt;1）MapReduce阶段（引用图）&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/6.png&#34;
	width=&#34;2153&#34;
	height=&#34;1010&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/6_hua0e78e1b96a3ff33a6cc2c0fa0ae5a54_1224715_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/6_hua0e78e1b96a3ff33a6cc2c0fa0ae5a54_1224715_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211201231712166&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;511px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2mapreduce进程&#34;&gt;2）MapReduce进程&lt;/h4&gt;
&lt;p&gt;一个完整的MapReduce程序在分布式运行时有三类实例进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MrAppMaster:负责整个程序的过程调度和状态调度&lt;/li&gt;
&lt;li&gt;MapTask：负责整个Map阶段的整个数据处理流程&lt;/li&gt;
&lt;li&gt;ReduceTask：负责整个Reduce阶段的整个数据处理流程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3mapreduce的编程规范&#34;&gt;3）MapReduce的编程规范&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Map阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户自定义的Mapper需要继承自己的父类&lt;/li&gt;
&lt;li&gt;Mapper的输入数据是KV对的形式（类型可以自定义）&lt;/li&gt;
&lt;li&gt;Mapper中的业务逻辑实现在map方法中&lt;/li&gt;
&lt;li&gt;Map的输出数据也是KV对的形式（同样可以自定义类型）&lt;/li&gt;
&lt;li&gt;Map方法对每一个&amp;lt;K,V&amp;gt;调用一次（一行一行的调用，多次使用map）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduce阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承父类&lt;/li&gt;
&lt;li&gt;reducer的输入数据类型对应mapper的输出类型&lt;/li&gt;
&lt;li&gt;Reducer的业务逻辑写在reduce阶段&lt;/li&gt;
&lt;li&gt;ReduceTask进程对每一组k的&amp;lt;k,v&amp;gt;带哦用一次reduce方法（多少K就进行多少次reduce）&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/7.png&#34;
	width=&#34;778&#34;
	height=&#34;172&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/7_hu78810db735cea7fd66e93f5923ba4cfc_76244_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/7_hu78810db735cea7fd66e93f5923ba4cfc_76244_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211201232720654&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;452&#34;
		data-flex-basis=&#34;1085px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Driver：相当于Yarn集群的客户端，用于提交我们整个正序到YARN集群，提交的是封装了MapReduce程序相关运行参数的job对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mapreduce&#34;&gt;MapReduce&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/8.png&#34;
	width=&#34;2160&#34;
	height=&#34;1223&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/8_hu6e9e7ea6ee5c879249308f764aa7d097_909064_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/8_hu6e9e7ea6ee5c879249308f764aa7d097_909064_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211204203926980&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;423px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/9.png&#34;
	width=&#34;2160&#34;
	height=&#34;1263&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/9_hub0c5cc7827b5d53d3084d1c1b5daed45_707427_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/9_hub0c5cc7827b5d53d3084d1c1b5daed45_707427_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211204204034482&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;410px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;1输入的数据inputformat数据输入&#34;&gt;1.输入的数据InputFormat数据输入&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Map切片大小设置为block大小时，效率最高&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）一个job的Map阶段并行度由客户端在提交Job时的切片数决定（切了多少片，多少个Maptask  &lt;strong&gt;注意每一个文件需要单独切&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;2）每一个Split切片分配一个MapTask并行实例处理&lt;/li&gt;
&lt;li&gt;3）默认情况，切片大小=BlockSize&lt;/li&gt;
&lt;li&gt;4）切片时不考虑数据集整体，而是逐个针对每一个文件单独切片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Job提交流程源码分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;waitForCompletion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//1 建立连接
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//1)创建提交Job的代理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cluster&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getConfiguration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;//(1) 判断是本地运行环境还是yarn运行环境
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jobTrackAddr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//2 提交Job
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;submitter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;submitJobInternal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Job&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 1）创建给集群提交数据的Stag路径
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jobStagingArea&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JobsubmissionFiles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getStagingDir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//2) 获取jobid 并创建job路径
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;JobID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jobId&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;submitClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getNewJobID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//3)如果是集群模式 拷贝jar包到集群
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;copyAndConfigureFiles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;submitJobDir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;rUploader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;uploadFiles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jobsubmitDir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//4) 计算切片，生成切片规划文件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;//5) 向stag路径写XML配置文件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;//6) 提交JOB，返回提交状态
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/10.png&#34;
	width=&#34;2141&#34;
	height=&#34;1069&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/10_hu02af538ca6c78fb332c6b27485d26ead_650504_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/10_hu02af538ca6c78fb332c6b27485d26ead_650504_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211202001636660&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;afileinputformat切片源码解析&#34;&gt;a.FileInputFormat切片源码解析&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;程序先找到数据存储的目录&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;遍历处理目录下的每一个文件&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;遍历第一个文件ss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;txt&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;获取文件大小fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sizeOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ttx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;计算切片大小&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;computeSplitSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blockSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blocksize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;128M&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;默认情况下切片大小都是blocksize&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;开始切&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;形成第一个切片&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;128M&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;第二个切片ss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;256&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;将切片信息写到一个切片规划文件中&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;整个切片的核心过程再getSplit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;方法完成&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputSplit只记录了&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;切片的元数据信息&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;比如起始位置&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;长度以及所在的节点列表&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;提交切片规划文件到YARN上&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;YARN上的MrAppMaster就可以根据切片规划文件计算开启MapTask的个数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;TextInputFormat是FileInputFormat的实现类 &amp;lt;Longwritable,Text&amp;gt;&lt;/p&gt;
&lt;p&gt;键是存储改行再整个文件中的起始字节偏移量，V是这行的内容&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;KeyValueFormat &amp;lt;Text , Text&amp;gt;  第0位 KEY 后面是 Value&lt;/p&gt;
&lt;h5 id=&#34;bcombinetextinputformat切片机制&#34;&gt;b.CombineTextInputFormat切片机制&lt;/h5&gt;
&lt;p&gt;CombineTextInputFormat处理方式是一次读取多个文件，把所有文件集合再一起处理.&lt;/p&gt;
&lt;p&gt;应用场景：用于小文件过多的场景，因为再默认框架中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/11.png&#34;
	width=&#34;1265&#34;
	height=&#34;638&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/11_hu1b80369f3b0b4e2874d8678ab6c03f99_276696_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/11_hu1b80369f3b0b4e2874d8678ab6c03f99_276696_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211204194701843&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;475px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2shuffle&#34;&gt;2.Shuffle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;map方法之后。reduce方法之前的过程都成为Shuffle&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/12.png&#34;
	width=&#34;2140&#34;
	height=&#34;1103&#34;
	srcset=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/12_hua90695b097b4be83b2e61db8b2e47a35_825504_480x0_resize_box_3.png 480w, https://yuxin-zh.github.io/AllForOne/AllForOne/p/hadoop-learning/12_hua90695b097b4be83b2e61db8b2e47a35_825504_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20211204205758591&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;465px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;apartitioner&#34;&gt;&lt;strong&gt;a.Partitioner&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注意：ReduceTask默认为1时，不会走默认的patitioner那个类，而是会运行那个一个内部类使得只有0这个分区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题：要求将统计结果按照条件输出到不同为你暗中（分区），归属地不同省份输出到不同文件中（分区）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认分区是根据key的hashcode对Reduce&amp;rsquo;Task个数取模得到的。用户没法控制哪个Key存储到那个分区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义Partitoner步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1）自定义类继承Partitioner，重写getPartitioner方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;www&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Partitioner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FlowBean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;{&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getPartitioner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FlowBean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpartitions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//控制分区代码业务逻辑
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;........&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;partition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2）在job驱动中，设置自定义Partioner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPartitionerClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CustomPartitioner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3）自定义partitioner后，需要根据逻辑设置相应数量的ReduceTask&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4）如果reduceTask数量大于getPartitioner的结果数，则会产生几个空的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5）如果reduceTask数量大于1 小于getPartitioner的结果数，则有一部分分区数据无法安防，报错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果reduceTask的数量为一，不管MapTask输出多少个分区的文件，结果都交由一个reduceTask，也就是产生一个结果文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;b全排序&#34;&gt;b.全排序&lt;/h4&gt;
&lt;p&gt;FlowBean需要实现WritableComparable接口重写compareTo()方法&lt;/p&gt;
&lt;h4 id=&#34;c二次排序&#34;&gt;c.二次排序&lt;/h4&gt;
&lt;h4 id=&#34;d区内排序&#34;&gt;d.区内排序&lt;/h4&gt;
&lt;h4 id=&#34;ecombiner&#34;&gt;e.Combiner&lt;/h4&gt;
&lt;p&gt;会对Key相同的进行合并，并且在MapTask处理一部分合并会提高效率（注意：不是所有都适用）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Combiner不属于Mapper和Reducer&lt;/li&gt;
&lt;li&gt;combiner组件的父类是Reducer&lt;/li&gt;
&lt;li&gt;Combiner和Reducer的区别在于运行的位置：前者在MapTask运行&lt;/li&gt;
&lt;li&gt;自定义：基于wordCount的案例  自定义Combiner&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3输出数据outputformat&#34;&gt;3.输出数据OutputFormat&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;核心方法：recordWriter决定写出类型&lt;/li&gt;
&lt;li&gt;自定义outputFormat：
&lt;ul&gt;
&lt;li&gt;过滤输出日志，包含atguigu的网站输出到&amp;hellip;，不包含&amp;hellip;.的输出到&amp;hellip;.&lt;/li&gt;
&lt;li&gt;创建一个类LogRecordWriter继承RecordWriter
&lt;ul&gt;
&lt;li&gt;(a) 创建两个文件的输出流：aout，bout&lt;/li&gt;
&lt;li&gt;(b)符合a条件的输出到aout ，其他的输出到bout&lt;/li&gt;
&lt;li&gt;(c) 要将自定的输出格式组件设置到job中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4join&#34;&gt;4.Join&lt;/h3&gt;
&lt;h3 id=&#34;5-etl&#34;&gt;5. ETL&lt;/h3&gt;
&lt;h3 id=&#34;6总结&#34;&gt;6.总结&lt;/h3&gt;
&lt;h3 id=&#34;7yarn在mapreduce中的作用&#34;&gt;7.Yarn在Mapreduce中的作用&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>Git</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/git/</link>
        <pubDate>Tue, 15 Feb 2022 00:01:02 +0800</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/git/</guid>
        <description>&lt;img src="https://yuxin-zh.github.io/AllForOne/p/git/b1.jpg" alt="Featured image of post Git" /&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&#34;git&#34;&gt;Git&lt;/h1&gt;
&lt;h2 id=&#34;1版本控制系统vcs&#34;&gt;1.版本控制系统（VCS)&lt;/h2&gt;
&lt;h3 id=&#34;11-基本概念----行内代码&#34;&gt;1.1 基本概念    &lt;code&gt;...&lt;/code&gt;行内代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;版本控制系统（VCS）最基本的功能就是版本控制。而所谓版本控制，意思就是在文件的修改历史中保存修改历史，让i方便对文件的i修改工作。&lt;/li&gt;
&lt;li&gt;我们常用的主流文本编辑器的undo功能其实就是版本控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;但是VCS和文本编辑器的撤销功能相比，有一个很重要的区别就是：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;对于程序代码而言：修改的生命周期很长，如果采用每次改动自动保存的形式来保存修改历史，将会导致改动历史非常频繁和无章可循。所以和文本编辑器的撤销功能不同，VCS保存修改历史，使用的是&lt;strong&gt;主动提交改动&lt;/strong&gt;的机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2分布式版本控制系统dvcs&#34;&gt;2.分布式版本控制系统(DVCS)&lt;/h2&gt;
&lt;h3 id=&#34;21-工作模型&#34;&gt;2.1 工作模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分布式（DVCS）与VCS的区别在于，分布式VCS除了中央仓库之外，还有本地仓库：团队的每一个成员的机器上都有一份本地昂库，这个仓库包含了所有版本历史，换句话说在这种工作模型内，你是和本地仓库交互。&lt;/li&gt;
&lt;li&gt;工作流程
&lt;ul&gt;
&lt;li&gt;提交代码到本地仓库&lt;/li&gt;
&lt;li&gt;在服务器上创建一个中央仓库，并把1中的提交推送到服务器的中央仓库。&lt;/li&gt;
&lt;li&gt;其他工作人员将中央仓库的所有内容克隆到本地，拥有了各自的本地仓库，此时进行并行开发&lt;/li&gt;
&lt;li&gt;在职过后的开发过程中，么个人都会独立负责开发一个功能，在这个功能的开发过程中，每个人都会把它的每一步改动提交到本地仓库（由于本地提交毋须立即推送到中央仓库，所以提交的内容不一定要是一个完整的功能额模块，而可以是某个步骤）&lt;/li&gt;
&lt;li&gt;当完成了某个功能的开发时，可以把与该功能相关的所有提交 &lt;strong&gt;从本地仓库推送到中央仓库&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;而每次有人把新的提交推送到中央仓库是，另外的人就可以选择把这些提交同步到自己的机器上，并把他们和自己的本地代码合并&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22优缺点分析&#34;&gt;2.2优缺点分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;😵优点：①大多数操作可以在本地运行，速度更快。②由于可以提交到本地，因此可以分步提交代码，把代码提交做的更细，而不是一个提交包含很多代码，难以review也难以回溯。&lt;/li&gt;
&lt;li&gt;🤠缺点：由于每一个旧机器都需要有完整的本地仓库，所以初次获取代码需要获取项目比较费时②本地占用的存储比中央式高&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3使用git管理代码&#34;&gt;3.使用Git管理代码&lt;/h2&gt;
&lt;h3 id=&#34;31-前期准备&#34;&gt;3.1 前期准备&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Github创建远程仓库 （.gitignore设置项目类型，是git仓库中的一个特俗的文本文件，记录了你不希望提交到仓库的目录和文件的名称或类型&lt;/li&gt;
&lt;li&gt;点击右边的Clone or downloda，然后把仓库的Clone地址复制到截切版&lt;/li&gt;
&lt;li&gt;在你喜欢的任意一个位置，打开Git Bash,&lt;strong&gt;输入Git clone 刚复制的地址&lt;/strong&gt;（该过程可能会需要你去输入Github的用户名和密码）&lt;/li&gt;
&lt;li&gt;克隆完毕后，你的目录中会出现.git的隐藏目录，改了目录就是你的本地仓库，你的所有把那本信息都会存在这里。而.git所在的目录成为工作目录。&lt;/li&gt;
&lt;li&gt;一些git的基本指令在这里就不详细介绍了，可以查阅Git官方文档&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4git基本工作模型&#34;&gt;4.Git基本工作模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由于git在工作时，必须保证自己的本地仓库与中央仓库保持一致，因此，当你第一次从中央仓库拉去代码后，你的同事又push了一次，那么当你想要把自己的commits提交上去时，就需要先拉取同事的代码到本地。😧&lt;/li&gt;
&lt;li&gt;当push时出现冲突：
&lt;ul&gt;
&lt;li&gt;在现实的团队开发中，全队时同时并行开发的，所以必然会出现当一人push代码时，中央仓库已经被其他同事先一步push了的情况。&lt;/li&gt;
&lt;li&gt;那这种情况下，当我们像上面介绍的那样使用git pull指令拉取代码时，他并不会像之前那样直接结束，而是会出现一个输入提交信息的界面，这是因为pull操作返现不仅远程仓库有本地每天有的commits，本地也有远端仓库不具备的commits，它就会把远端和本地独有的commit合并，自动生成一个新的commit&lt;/li&gt;
&lt;li&gt;另一种情况，当出现冲突的部分是你和你的同事对某一个文件的某一处进行了不同的修改，Git就无法直接处理了，关于这点会在之后的文章中介绍🦄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5headmasterbranch的使用讲解&#34;&gt;5.Head、master、branch的使用讲解&lt;/h2&gt;
&lt;p&gt;👇👇👇👇👇👇👇👇👇👇👇👇&lt;/p&gt;
&lt;p&gt;When Typed &amp;ldquo;git log&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/nUwiuFzc2vDJ13g.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220210161411687.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一行的commit后面的括号里的 &lt;em&gt;HEAD-&amp;gt; main&lt;/em&gt;，是只想这个commit的引用。在Git操作中，经常会需要对指定Commit进行操作，而每一个Commit都会有它唯一的指定方式——它的SHA-1校验和，也就是每个commit中那串黄色的字符。由于SHA-1重复的概率极低，因此你可以使用它来指代某一个commit，也可以只是用他的前几位来指代。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Head ：当前的Commit的引用：也就是说当前工作目录所对应的Commit。All in all,Commit在哪里，Head就在哪里。、&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Branch：是Git中的另一个引用，Head除了可以指向commit，还可以指branch；当他指向branch时，会通过这个branch来简介地指向某个commit；Besides:person_frowning:当Head在提交时自动向前移动时，它会带着它所指向地Branch一起移动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如上图 HEAD-&amp;gt;main,main就是当前分支的名字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/9xeTpcd86Zky72Q.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220210162748358.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;当你输入Git commit,Head就会带着这个分支，移向下一个commit
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/BWpratdZP3NOhJM.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220210162916120.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你可以通过git log指令 对这个逻辑进行验证，这里就不详细说明了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master：默认branch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一般而言，master是Git的默认主分支，它具备一些特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当你新建仓库时，是不存在任何commit的，但在它创建第一个commit时，会把master指向它，并把Head指向master :grin:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当某人使用git clone时，除了从远程仓库把.git这个仓库目录下栽到工作目录中，还会checkout（签出，后面讲解） master&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类似于这个过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/jAR91PtpOvlYQJa.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220210164300791.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;branch的通俗解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表面上看，branch是一个指向commit的引用，但是你也可以把它理解为从初始  &lt;em&gt;commit&lt;/em&gt; 到branch所指向的&lt;em&gt;commit&lt;/em&gt;之间的所有Commits的一个串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;branch相关指令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tex&#34; data-lang=&#34;tex&#34;&gt;创建branch： git branch +分支名 
切换branch： git checkout +分支名
git checkout -b 名称是这步操作合并执行
删除branch：
git branch -d 分支名
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;branch 创建 切换 删除的流程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/egZFWkEVPOl3JcG.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220210165017931.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/gA4ariTKd8BXVno.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220210165036392.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个分支出现分叉 :pensive:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/wKVqdTLc5CNuQlk.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220210165124086.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notice :imp:Head指向的branch不可以删除；删除branch只是删除这个引用，并不会删除任何的&lt;em&gt;commit&lt;/em&gt;；没有被合并到master过的branch在删除时会失败，担心删除错误，但是若想强制删除 把d大写即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-push的本质&#34;&gt;6. Push的本质&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;之前讲的：😳Push指令所做的事是把你的本地提交上传到中央仓库去，用本地的内容覆盖掉远端的内容，其实这个说法是不准确的🐷。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实质上&lt;/strong&gt;，Push所做的事是：把当前branch的位置上传到远端仓库，并把它的路径上的&lt;code&gt;commits&lt;/code&gt;一并上传。🙏比如，当前我的本地仓库有一个分支叫&lt;code&gt;master&lt;/code&gt;,它超前了远程仓库两个提交（如下图所示）；另外还有一个新建的&lt;code&gt;branch&lt;/code&gt;叫&lt;code&gt;feature1&lt;/code&gt;，远程仓库还没有记载过，具体情况如下图：🤥&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/QpCk3SVBK1v8m2J.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220213151805782.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此时当我执行&lt;code&gt;git push&lt;/code&gt;,就会把&lt;code&gt;master&lt;/code&gt;的最新位置更新到远端，并把它的路径上的&lt;code&gt;5,6&lt;/code&gt;两个·commit`上传，示例如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/rPfCO2LuBZKqTiy.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220213151955662.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以注意到此时远程仓库与master分支的状态同步，但是与&lt;code&gt;feature1&lt;/code&gt;的状态不同步，此时可以切换到&lt;code&gt;feature1&lt;/code&gt;分支，然后同样的 操作就可以实现将&lt;code&gt;commit 4&lt;/code&gt;提交到远程。🦉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体的操作步骤如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git checkout feature1
git push origin feature1
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以注意到，这里的git push比之前多了两个参数：&lt;code&gt;origin``feature1&lt;/code&gt;,其中&lt;code&gt;orgin&lt;/code&gt;是远程仓库的别名，是你在&lt;code&gt;git clone&lt;/code&gt;时Git默认的名称，&lt;code&gt;feature1&lt;/code&gt;则是远程仓库中目标&lt;code&gt;branch&lt;/code&gt;的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notice：在Git 2.0版本，&lt;code&gt;git push&lt;/code&gt;只能上传从远端&lt;code&gt;clone&lt;/code&gt;或&lt;code&gt;git pull&lt;/code&gt;下来的分支,而你本地自己创建的分支，在提交时需要手动指定目标仓库和目标分支。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🧐好吧，其实你也可以通过&lt;code&gt;git config&lt;/code&gt;指令来设置&lt;code&gt;push.deafault&lt;/code&gt;的值来改变&lt;code&gt;push&lt;/code&gt;的行为逻辑；如果有兴趣，可以点击阅读  &lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/docs/git-config#git-config-pushdefault&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git-Config&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Okay，当你将Feature1推送到远程仓库时，你会发现，远程仓库的&lt;code&gt;Head&lt;/code&gt;并没有和本地一样指向&lt;code&gt;feature1&lt;/code&gt;，这是因为&lt;code&gt;Push&lt;/code&gt;并不会上传本地的&lt;code&gt;HeAD&lt;/code&gt;的指向，而是仅仅只上传当前&lt;code&gt;branc&lt;/code&gt;·的指向。⚙实际上，远程仓库的&lt;code&gt;Head&lt;/code&gt;永远指向它的默认分支（即master），并随着该默认分支的移动而移动。👳👳👳&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7merge合并commits&#34;&gt;7.merge：合并commits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actually，&lt;code&gt;pull&lt;/code&gt;的内部操作其实时先&lt;code&gt;fetch&lt;/code&gt;即把远程仓库拉取到本地，在使用&lt;code&gt;merge&lt;/code&gt;来把远端仓库的新的&lt;code&gt;commits&lt;/code&gt;合并到本地，接下来会详细解释下什么是merge。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先来段官方解释：&lt;strong&gt;从目标&lt;code&gt;commit&lt;/code&gt;和当前&lt;code&gt;commit&lt;/code&gt;（Head所指向的commit）分叉的位置起，把目标&lt;code&gt;commit&lt;/code&gt;的路径上所有&lt;code&gt;commit&lt;/code&gt;的内容一并应用到当前&lt;code&gt;commit&lt;/code&gt;,然后自动生成一个新的&lt;code&gt;commit&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;emm 🙃如图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/AZQTHiEBcsk4KDF.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220213155935084.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;当你此时执行&lt;code&gt;git merge branch1&lt;/code&gt;,Git会把&lt;code&gt;5&lt;/code&gt;和&lt;code&gt;6&lt;/code&gt;这两个&lt;code&gt;commit&lt;/code&gt;一起和&lt;code&gt;4&lt;/code&gt;合并，并生成一个新的提交，并体哦啊转到信息提交填写界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/pbZarv37kgd6HLN.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220213160121658.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在信息提交完成之后，merge过程就结束了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/kpARVdKT9zsonGv.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220213160153696.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Merge的特殊情况处理&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conflict Happend&lt;/strong&gt; 😭&lt;/p&gt;
&lt;p&gt;&lt;em&gt;常规的&lt;code&gt;merge&lt;/code&gt;在执行合并操作的时候，具备一定的自动和合并能力：比如当一个分支对A文件进行了修改，另一个分支对B文件进行了修改，那么合并的结果就是A和B都被修改；如果两个分支都修改了同一个文件的不同位置，那么合并后就是两处修改都保存&lt;/em&gt;，那么问题来了，当你修改的是同一个文件的同一位置，merge操作会怎么处理呢，这种情况我们成为 &lt;strong&gt;Conflict&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设我们呢正处于冲突的情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git merge feature1
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/rDa1HCGIdlmtFV6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220213161618900.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;提示信息会说你需要把冲突解决后提交&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解决冲突&lt;/p&gt;
&lt;p&gt;当你打开重现冲突的文件时，你会发现虽然Git没有帮你自动完成&lt;code&gt;Merge&lt;/code&gt;但是它对文件还是做了一些工作的，也就是将分支冲突的内容放在了一起，并且标出了它们的出处，Like this：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/Gp6UkAPo8aSDXef.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220213161954654.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;你只需要删除掉你不想保留的分支的修改，并删除Git添加的那三行&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;code&gt;===``&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;的辅助文字，save and quit，就解决了冲突👬。当然也有一些辅助公寓用于解决冲突，可以自行搜索。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决完冲突就可以手动提交了：&lt;code&gt;git add 出现冲突的文件名&lt;/code&gt;  然后 &lt;code&gt;git commit&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/mTH7PhQpSGJzncu.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220213162423167.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;😱可以看到，被冲突阻断的&lt;code&gt;merge&lt;/code&gt;，在手动&lt;code&gt;commit&lt;/code&gt;时依然会自动填写提交信息，这是因为在冲突发生后，Git仓库处于一个【冲突待解决】的状态，在这种状态下，Git会自动添加提交信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当然如果你不知道这个冲突该怎么解决，所以你决定放弃处理，也需要执行一次&lt;code&gt;merge --avort&lt;/code&gt;来手动取消它，这样你的Git仓库会回到&lt;code&gt;merge&lt;/code&gt;之前的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HEAD领先于目标commit&lt;/strong&gt;😓&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/FGu7fBh2etPcVNK.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220213163035450.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这时&lt;code&gt;merge&lt;/code&gt;并不会创建一个新的&lt;code&gt;commit&lt;/code&gt;来进行合并操作，在这种情况下，Git什么野不会处理，是一个&lt;strong&gt;空操作&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Head落后于目标commit&lt;/strong&gt;👊&lt;/p&gt;
&lt;p&gt;这种操作会让Head直接移动到，目标分支所指向的commit，这种操作有一个专有操作，叫做&amp;quot;fast-forward&amp;quot;  。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8feature-branching&#34;&gt;8.Feature Branching&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Feature Branching时目前最流行的gGit工作流，它的核心内容可以归纳为以下两点：
&lt;ol&gt;
&lt;li&gt;任何新的功能或bug修复全都新建一个branch来写&lt;/li&gt;
&lt;li&gt;brnach写完后，合并到master（默认的主分支），然后删掉这个branch&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9about-add&#34;&gt;9.About &amp;lsquo;add&amp;rsquo;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;add的基本用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add fileName&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还可以使用&lt;code&gt;git add .&lt;/code&gt;来把当前工作目录下的所有改动全部放进暂存区&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其实，add添加的时文件改动，而不是文件名&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查看git保存的历史记录&lt;/strong&gt;🆑&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git log     --查看历史记录
git log -p  --可以看到每一个commit的每一行改动
git log -stat --查看简要统计，适用于大概看以下改动内容
git show +某一个commit的引用 --看任意一个commit
git diff -staged --显示你即将提交的内容，换句话说，就是如果你立即输入&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;git commit&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;，你将提交什么  &lt;span class=&#34;nv&#34;&gt;该指令中staged&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;cached


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10-用rebase代替merge的工作&#34;&gt;10. 用rebase代替merge的工作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Rebase&lt;/code&gt;：把你指定的&lt;code&gt;commit&lt;/code&gt;以及它所在的commit串，以指定的目标commit为基础，一次重新提交一遍，具体过程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/DXQRpT6lcz8kSB3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220214005051305.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220214005112522.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220214005112522&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看出，通过 &lt;code&gt;rebase&lt;/code&gt;，&lt;code&gt;5&lt;/code&gt; 和 &lt;code&gt;6&lt;/code&gt; 两条 &lt;code&gt;commit&lt;/code&gt;s 把基础点从 &lt;code&gt;2&lt;/code&gt; 换成了 &lt;code&gt;4&lt;/code&gt; ；另外，在 &lt;code&gt;rebase&lt;/code&gt; 之后，记得切回 &lt;code&gt;master&lt;/code&gt; 再 &lt;code&gt;merge&lt;/code&gt; 一下，把 &lt;code&gt;master&lt;/code&gt; 移到最新的 &lt;code&gt;commit&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notice🎃：为了避免和远端仓库发生冲突，一般不要从 &lt;code&gt;master&lt;/code&gt; 向其他 &lt;code&gt;branch&lt;/code&gt; 执行 &lt;code&gt;rebase&lt;/code&gt; 操作。🎃&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;11git应用实例&#34;&gt;11.Git应用实例&lt;/h2&gt;
&lt;h3 id=&#34;111-刚提交的代码写错了怎么办&#34;&gt;11.1 刚提交的代码，写错了怎么办？🙃&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一种解决方法是再新写一个关于修改这个错误的&lt;code&gt;commit&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另一种则是通过：&lt;code&gt;commit -—amend&lt;/code&gt;；在提交时，如果加上 &lt;code&gt;--amend&lt;/code&gt; 参数，Git 不会在当前 &lt;code&gt;commit&lt;/code&gt; 上增加 &lt;code&gt;commit&lt;/code&gt;，而是会把当前 &lt;code&gt;commit&lt;/code&gt; 里的内容和暂存区（stageing area）里的内容合并起来后创建一个新的 &lt;code&gt;commit&lt;/code&gt;，&lt;strong&gt;用这个新的 &lt;code&gt;commit&lt;/code&gt; 把当前 &lt;code&gt;commit&lt;/code&gt; 替换掉&lt;/strong&gt;🎉&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add  修改后的文件
git commit --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;112错误的不是最新的提交而是倒数第二个怎么办&#34;&gt;11.2错误的不是最新的提交，而是倒数第二个怎么办😥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这时候就可以通过 &lt;code&gt;rebase -i&lt;/code&gt; 来找指定当前分支要&lt;code&gt;rebase&lt;/code&gt;的&lt;code&gt;commit&lt;/code&gt;链中的每一个&lt;code&gt;commit&lt;/code&gt;是否需要修改。因此你可以做如下操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git log
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/9m2sa18gVrEiSRp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220214112509390.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git rebase -i HEAD^^
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-htm&#34; data-lang=&#34;htm&#34;&gt;说明：在 Git 中，有两个「偏移符号」： ^ 和 ~。

    ^ 的用法：在 commit 的后面加一个或多个 ^ 号，可以把 commit 往回偏移，偏移的数量是 ^ 的数量。例如：master^ 表示 master 指向的 commit 之前的那个 commit； HEAD^^ 表示 HEAD 所指向的 commit 往前数两个 commit。

    ~ 的用法：在 commit 的后面加上 ~ 号和一个数，可以把 commit 往回偏移，偏移的数量是 ~ 号后面的数。例如：HEAD~5 表示 HEAD 指向的 commit往前数 5 个 commit。

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行后，会出现如下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/upId4GCtUqvwEgF.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220214112858509.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这个编辑界面的最顶部，列出了将要「被 rebase」的所有 &lt;code&gt;commit&lt;/code&gt;s，也就是倒数第二个 &lt;code&gt;commit&lt;/code&gt; 「增加常见笑声集合」和最新的 &lt;code&gt;commit&lt;/code&gt;「增加常见哭声集合」。需要注意，这个排列是正序的，旧的 &lt;code&gt;commit&lt;/code&gt; 会排在上面，新的排在下面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的目标是修改倒数第二个 &lt;code&gt;commit&lt;/code&gt;，也就是上面的那个「增加常见笑声集合」，所以你需要把它的操作指令从 &lt;code&gt;pick&lt;/code&gt; 改成 &lt;code&gt;edit&lt;/code&gt; 。 &lt;code&gt;edit&lt;/code&gt; 的意思是「应用这个 commit，然后停下来等待继续修正」&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/ZP8DsItAmHiY43G.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220214113013686.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;把 &lt;code&gt;pick&lt;/code&gt; 修改成 &lt;code&gt;edit&lt;/code&gt; 后，就可以退出编辑界面了：此时&lt;code&gt;rebase&lt;/code&gt; 过程已经停在了第二个 &lt;code&gt;commit&lt;/code&gt; 的位置，那么现在你就可以去修改你想修改的内容了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git add 修改后的文件&lt;/code&gt;   &lt;code&gt;git commit --amend&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修复完成后 使用 &lt;code&gt;git rebase --continue&lt;/code&gt;来继续&lt;code&gt;rebase&lt;/code&gt;过程，把后面的commit 直接应用上去&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可能看文字描述有点不能理解，👌上图：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rebase -i HEAD^^&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/JjXgWf4xl5d8IkZ.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220214115039540.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yuxin-zh.github.io/AllForOne/AllForOne/C:%5cUsers%5c%e8%af%b7%e8%be%93%e5%85%a5%e5%a7%93%e5%90%8d%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220214115051199.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220214115051199&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rebase --continue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/14/E9ZPy4aSn2ilWsR.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220214115130997.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;113-甚至都不想修改删除算了&#34;&gt;11.3 甚至都不想修改，删除算了&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;丢弃最新的提交使用：&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;n&#34;&gt;HEAD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;表示你要恢复到哪个&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。因为你要撤销最新的一个&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，所以你需要恢复到它的父&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，也就是&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HEAD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reset的实质：其实是重置HEAD以及它所指向的&lt;code&gt;branch&lt;/code&gt;的位置的&lt;/strong&gt;，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这样就需要提下&lt;code&gt;git reset --hard&lt;/code&gt;和&lt;code&gt;git reset --soft&lt;/code&gt;的区别了：前者是在重置 &lt;code&gt;HEAD&lt;/code&gt; 和 &lt;code&gt;branch&lt;/code&gt; 的同时，重置工作目录里的内容；后者则是会在重置 &lt;code&gt;HEAD&lt;/code&gt; 和 &lt;code&gt;branch&lt;/code&gt; 时，保留工作目录和暂存区中的内容，并把重置 &lt;code&gt;HEAD&lt;/code&gt; 所带来的新的差异放进暂存区。&lt;/li&gt;
&lt;li&gt;例如  hard：你新修改了一个文件，但是并没有提交，使用了hard指令，此时你的工作目录里的新改动也消失了，并与reset切换到的commit保持同样的内容；soft则是会保留工作目录和暂存区的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;丢弃的不是最新的提交  ：&lt;/p&gt;
&lt;p&gt;那就变基到你想删除的提交之前的那个COMMIT：&lt;code&gt;git rebase -i HEAD~?&lt;/code&gt;，然后再提示信息界面删除那个提交即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于&lt;code&gt;rebase -i&lt;/code&gt;进行说明&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rebase -i其实可以理解为把当前head所指向的commit之前的某个提交作为基点，从该基点开始，对后面的当前分支的commit进行提交，但是它会先给个提示信息界面用于你去选择对基点之后的commit进行操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方便的撤销：git onto&lt;/strong&gt; 🤘&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git rebase --onto 目标commit 起点commit 终点commitv  Notice:起点不包含再rebase中
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;114-代码已经push上去了并合并到master&#34;&gt;11.4 代码已经push上去了🔐，并合并到master&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在这种情况下，你就需要做一个把这行代码还原回来的提交：&lt;code&gt;revert&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git revert HEAD^&lt;/code&gt;这行代码会增加一条新的提交，它的内容和倒数第二个&lt;code&gt;commit&lt;/code&gt;是相反的，从而达到撤销的目的。⚠&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12checkout本质&#34;&gt;12.CheckOut本质&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前面说到&lt;code&gt;checkout&lt;/code&gt;可以用来切换 &lt;code&gt;branch&lt;/code&gt;；但是实质上，它的功能其实是：**签出指定的&lt;code&gt;commit&lt;/code&gt;**🤪，通俗的讲，就是把 &lt;code&gt;HEAD&lt;/code&gt; 指向指定的 &lt;code&gt;branch&lt;/code&gt;，然后签出这个 &lt;code&gt;branch&lt;/code&gt; 所对应的 &lt;code&gt;commit&lt;/code&gt; 的工作目录。所以同样的，&lt;code&gt;checkout&lt;/code&gt; 的目标也可以不是 &lt;code&gt;branch&lt;/code&gt;，而直接指定某个 &lt;code&gt;commit&lt;/code&gt;✏&lt;/li&gt;
&lt;li&gt;checkout和reset都可以切换head的位置，但是reset同时移动HEAD和它所指向的branch，而checkout只移动head&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-关于gitignore&#34;&gt;13. 关于.gitignore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 Git 中有一个特殊的文本文件：&lt;code&gt;.gitignore&lt;/code&gt;。这个文本文件记录了所有你希望被 Git 忽略的目录和文件。具体的规则可查阅 👉  &lt;a class=&#34;link&#34; href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fgit-scm.com%2Fdocs%2Fgitignore&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;💾&lt;/a&gt;  👈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14使用git常出现的错误reamins-to-be-done&#34;&gt;14.使用git常出现的错误(REAMINS TO BE DONE)&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>Test</title>
        <link>https://yuxin-zh.github.io/AllForOne/p/test-chinese/</link>
        <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yuxin-zh.github.io/AllForOne/p/test-chinese/</guid>
        <description>&lt;img src="https://yuxin-zh.github.io/AllForOne/p/test-chinese/12.jpg" alt="Featured image of post Test" /&gt;&lt;p&gt;wwwwww&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
